
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000e36  00000eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800080  00800080  00000eea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aa2  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8c  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017eb  00000000  00000000  00004bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  0000639c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e1  00000000  00000000  00006cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000237b  00000000  00000000  00007ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_1>
   8:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_2>
   c:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_5>
  18:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_8>
  24:	0c 94 af 04 	jmp	0x95e	; 0x95e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  8a:	0c 94 19 07 	jmp	0xe32	; 0xe32 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteIns>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteIns+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteIns+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteIns+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteIns+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteIns+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteIns+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteIns+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteIns+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_writepin>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 23c:	8f e9       	ldi	r24, 0x9F	; 159
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 24e:	08 95       	ret

00000250 <LCD_WriteChar>:
 250:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
 254:	08 95       	ret

00000256 <LCD_SetCursor>:
 256:	81 11       	cpse	r24, r1
 258:	05 c0       	rjmp	.+10     	; 0x264 <LCD_SetCursor+0xe>
 25a:	86 2f       	mov	r24, r22
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 262:	08 95       	ret
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	21 f4       	brne	.+8      	; 0x270 <LCD_SetCursor+0x1a>
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	86 0f       	add	r24, r22
 26c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 270:	08 95       	ret

00000272 <LCD_WriteNumber>:
	_delay_ms(1);
}


void LCD_WriteNumber(s32 num)
{
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2a 97       	sbiw	r28, 0x0a	; 10
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	6b 01       	movw	r12, r22
 292:	7c 01       	movw	r14, r24
	u8 str[10],i=0,j;
	if (num==0)
 294:	61 15       	cp	r22, r1
 296:	71 05       	cpc	r23, r1
 298:	81 05       	cpc	r24, r1
 29a:	91 05       	cpc	r25, r1
 29c:	21 f4       	brne	.+8      	; 0x2a6 <LCD_WriteNumber+0x34>
	{
		LCD_WriteChar('0');
 29e:	80 e3       	ldi	r24, 0x30	; 48
 2a0:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WriteChar>
 2a4:	39 c0       	rjmp	.+114    	; 0x318 <LCD_WriteNumber+0xa6>
		return;
	}
	if (num<0)
 2a6:	99 23       	and	r25, r25
 2a8:	5c f4       	brge	.+22     	; 0x2c0 <LCD_WriteNumber+0x4e>
	{
		num=num*(-1);
 2aa:	f0 94       	com	r15
 2ac:	e0 94       	com	r14
 2ae:	d0 94       	com	r13
 2b0:	c0 94       	com	r12
 2b2:	c1 1c       	adc	r12, r1
 2b4:	d1 1c       	adc	r13, r1
 2b6:	e1 1c       	adc	r14, r1
 2b8:	f1 1c       	adc	r15, r1
		LCD_WriteChar('-');
 2ba:	8d e2       	ldi	r24, 0x2D	; 45
 2bc:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WriteChar>
	_delay_ms(1);
}


void LCD_WriteNumber(s32 num)
{
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <LCD_WriteNumber+0x7c>
		LCD_WriteChar('-');
	}
	
	while(num)
	{
		str[i]=num%10 +'0';
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	2a e0       	ldi	r18, 0x0A	; 10
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divmodsi4>
 2d4:	e1 e0       	ldi	r30, 0x01	; 1
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	e1 0f       	add	r30, r17
 2de:	f1 1d       	adc	r31, r1
 2e0:	60 5d       	subi	r22, 0xD0	; 208
 2e2:	60 83       	st	Z, r22
		i++;
 2e4:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
 2e6:	c2 2e       	mov	r12, r18
 2e8:	d3 2e       	mov	r13, r19
 2ea:	e4 2e       	mov	r14, r20
 2ec:	f5 2e       	mov	r15, r21
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}
	
	while(num)
 2ee:	c1 14       	cp	r12, r1
 2f0:	d1 04       	cpc	r13, r1
 2f2:	e1 04       	cpc	r14, r1
 2f4:	f1 04       	cpc	r15, r1
 2f6:	31 f7       	brne	.-52     	; 0x2c4 <LCD_WriteNumber+0x52>
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <LCD_WriteNumber+0xa2>
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
	{
		LCD_WriteChar(str[j-1]);
 2fa:	e1 2f       	mov	r30, r17
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	8c 0f       	add	r24, r28
 306:	9d 1f       	adc	r25, r29
 308:	e8 0f       	add	r30, r24
 30a:	f9 1f       	adc	r31, r25
 30c:	80 81       	ld	r24, Z
 30e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WriteChar>
	{
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
 312:	11 50       	subi	r17, 0x01	; 1
 314:	11 11       	cpse	r17, r1
 316:	f1 cf       	rjmp	.-30     	; 0x2fa <LCD_WriteNumber+0x88>
	{
		LCD_WriteChar(str[j-1]);
	}

}
 318:	2a 96       	adiw	r28, 0x0a	; 10
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	08 95       	ret

00000334 <Task3>:
 */ 
#include "os/os.h"

void Task3(void)
{
	 DIO_togglepin(PINB0);
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_togglepin>
 33a:	08 95       	ret

0000033c <Task5>:
}
void Task5(void)
{
	 DIO_togglepin(PINB1);
 33c:	89 e0       	ldi	r24, 0x09	; 9
 33e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_togglepin>
 342:	08 95       	ret

00000344 <main>:
}
 
int main(void)
{  
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	00 d0       	rcall	.+0      	; 0x34a <main+0x6>
 34a:	00 d0       	rcall	.+0      	; 0x34c <main+0x8>
 34c:	00 d0       	rcall	.+0      	; 0x34e <main+0xa>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
	
	DIO_Init_All();
 352:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_Init_All>
	LCD_Init();
 356:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	GLOBALE_ENABLE();
 35a:	78 94       	sei
    OS_Init();
 35c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <OS_Init>
 	strOSConfigTask_t strOSConfigTask3 = {3, Task3};
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	8a e9       	ldi	r24, 0x9A	; 154
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	9b 83       	std	Y+3, r25	; 0x03
 36a:	8a 83       	std	Y+2, r24	; 0x02
 	strOSConfigTask_t strOSConfigTask5 = {5, Task5};
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	8c 83       	std	Y+4, r24	; 0x04
 370:	8e e9       	ldi	r24, 0x9E	; 158
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	9e 83       	std	Y+6, r25	; 0x06
 376:	8d 83       	std	Y+5, r24	; 0x05
    OS_CreateTask(3, &strOSConfigTask3);
 378:	be 01       	movw	r22, r28
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	0e 94 d6 05 	call	0xbac	; 0xbac <OS_CreateTask>
	OS_CreateTask(5, &strOSConfigTask5);
 384:	be 01       	movw	r22, r28
 386:	6c 5f       	subi	r22, 0xFC	; 252
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	0e 94 d6 05 	call	0xbac	; 0xbac <OS_CreateTask>
	OS_Run();
 390:	0e 94 0b 06 	call	0xc16	; 0xc16 <OS_Run>

}
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	26 96       	adiw	r28, 0x06	; 6
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <DIO_initpin>:
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
 3aa:	98 2f       	mov	r25, r24
 3ac:	96 95       	lsr	r25
 3ae:	96 95       	lsr	r25
 3b0:	96 95       	lsr	r25
 3b2:	87 70       	andi	r24, 0x07	; 7
 3b4:	61 30       	cpi	r22, 0x01	; 1
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_initpin+0x10>
 3b8:	59 c0       	rjmp	.+178    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <DIO_initpin+0x1a>
 3bc:	62 30       	cpi	r22, 0x02	; 2
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_initpin+0x18>
 3c0:	a9 c0       	rjmp	.+338    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 3c2:	fc c0       	rjmp	.+504    	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 3c4:	91 30       	cpi	r25, 0x01	; 1
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <DIO_initpin+0x50>
 3c8:	28 f0       	brcs	.+10     	; 0x3d4 <DIO_initpin+0x2a>
 3ca:	92 30       	cpi	r25, 0x02	; 2
 3cc:	49 f1       	breq	.+82     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3ce:	93 30       	cpi	r25, 0x03	; 3
 3d0:	d1 f1       	breq	.+116    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3d2:	f6 c0       	rjmp	.+492    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 3d4:	4a b3       	in	r20, 0x1a	; 26
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_initpin+0x38>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_initpin+0x34>
 3e6:	cb 01       	movw	r24, r22
 3e8:	94 2f       	mov	r25, r20
 3ea:	98 2b       	or	r25, r24
 3ec:	9a bb       	out	0x1a, r25	; 26
 3ee:	9b b3       	in	r25, 0x1b	; 27
 3f0:	80 95       	com	r24
 3f2:	89 23       	and	r24, r25
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	47 b3       	in	r20, 0x17	; 23
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	8a 95       	dec	r24
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	94 2f       	mov	r25, r20
 410:	98 2b       	or	r25, r24
 412:	97 bb       	out	0x17, r25	; 23
 414:	98 b3       	in	r25, 0x18	; 24
 416:	80 95       	com	r24
 418:	89 23       	and	r24, r25
 41a:	88 bb       	out	0x18, r24	; 24
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	44 b3       	in	r20, 0x14	; 20
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	94 2f       	mov	r25, r20
 436:	98 2b       	or	r25, r24
 438:	94 bb       	out	0x14, r25	; 20
 43a:	95 b3       	in	r25, 0x15	; 21
 43c:	80 95       	com	r24
 43e:	89 23       	and	r24, r25
 440:	85 bb       	out	0x15, r24	; 21
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
 446:	41 b3       	in	r20, 0x11	; 17
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	cb 01       	movw	r24, r22
 45a:	94 2f       	mov	r25, r20
 45c:	98 2b       	or	r25, r24
 45e:	91 bb       	out	0x11, r25	; 17
 460:	92 b3       	in	r25, 0x12	; 18
 462:	80 95       	com	r24
 464:	89 23       	and	r24, r25
 466:	82 bb       	out	0x12, r24	; 18
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
 46c:	91 30       	cpi	r25, 0x01	; 1
 46e:	c9 f0       	breq	.+50     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 470:	28 f0       	brcs	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 472:	92 30       	cpi	r25, 0x02	; 2
 474:	49 f1       	breq	.+82     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 476:	93 30       	cpi	r25, 0x03	; 3
 478:	d1 f1       	breq	.+116    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 47a:	a4 c0       	rjmp	.+328    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 47c:	4a b3       	in	r20, 0x1a	; 26
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	b9 01       	movw	r22, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	cb 01       	movw	r24, r22
 490:	80 95       	com	r24
 492:	94 2f       	mov	r25, r20
 494:	98 23       	and	r25, r24
 496:	9a bb       	out	0x1a, r25	; 26
 498:	9b b3       	in	r25, 0x1b	; 27
 49a:	89 23       	and	r24, r25
 49c:	8b bb       	out	0x1b, r24	; 27
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret
 4a2:	47 b3       	in	r20, 0x17	; 23
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	80 95       	com	r24
 4b8:	94 2f       	mov	r25, r20
 4ba:	98 23       	and	r25, r24
 4bc:	97 bb       	out	0x17, r25	; 23
 4be:	98 b3       	in	r25, 0x18	; 24
 4c0:	89 23       	and	r24, r25
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
 4c8:	44 b3       	in	r20, 0x14	; 20
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	8a 95       	dec	r24
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4da:	cb 01       	movw	r24, r22
 4dc:	80 95       	com	r24
 4de:	94 2f       	mov	r25, r20
 4e0:	98 23       	and	r25, r24
 4e2:	94 bb       	out	0x14, r25	; 20
 4e4:	95 b3       	in	r25, 0x15	; 21
 4e6:	89 23       	and	r24, r25
 4e8:	85 bb       	out	0x15, r24	; 21
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
 4ee:	41 b3       	in	r20, 0x11	; 17
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 500:	cb 01       	movw	r24, r22
 502:	80 95       	com	r24
 504:	94 2f       	mov	r25, r20
 506:	98 23       	and	r25, r24
 508:	91 bb       	out	0x11, r25	; 17
 50a:	92 b3       	in	r25, 0x12	; 18
 50c:	89 23       	and	r24, r25
 50e:	82 bb       	out	0x12, r24	; 18
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
 514:	91 30       	cpi	r25, 0x01	; 1
 516:	c9 f0       	breq	.+50     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 518:	28 f0       	brcs	.+10     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 51a:	92 30       	cpi	r25, 0x02	; 2
 51c:	49 f1       	breq	.+82     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 51e:	93 30       	cpi	r25, 0x03	; 3
 520:	d1 f1       	breq	.+116    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 522:	52 c0       	rjmp	.+164    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 524:	4a b3       	in	r20, 0x1a	; 26
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	b9 01       	movw	r22, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	8a 95       	dec	r24
 534:	e2 f7       	brpl	.-8      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 536:	cb 01       	movw	r24, r22
 538:	96 2f       	mov	r25, r22
 53a:	90 95       	com	r25
 53c:	94 23       	and	r25, r20
 53e:	9a bb       	out	0x1a, r25	; 26
 540:	9b b3       	in	r25, 0x1b	; 27
 542:	89 2b       	or	r24, r25
 544:	8b bb       	out	0x1b, r24	; 27
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
 54a:	47 b3       	in	r20, 0x17	; 23
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	8a 95       	dec	r24
 55a:	e2 f7       	brpl	.-8      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 55c:	cb 01       	movw	r24, r22
 55e:	96 2f       	mov	r25, r22
 560:	90 95       	com	r25
 562:	94 23       	and	r25, r20
 564:	97 bb       	out	0x17, r25	; 23
 566:	98 b3       	in	r25, 0x18	; 24
 568:	89 2b       	or	r24, r25
 56a:	88 bb       	out	0x18, r24	; 24
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	08 95       	ret
 570:	44 b3       	in	r20, 0x14	; 20
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	b9 01       	movw	r22, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	8a 95       	dec	r24
 580:	e2 f7       	brpl	.-8      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 582:	cb 01       	movw	r24, r22
 584:	96 2f       	mov	r25, r22
 586:	90 95       	com	r25
 588:	94 23       	and	r25, r20
 58a:	94 bb       	out	0x14, r25	; 20
 58c:	95 b3       	in	r25, 0x15	; 21
 58e:	89 2b       	or	r24, r25
 590:	85 bb       	out	0x15, r24	; 21
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret
 596:	41 b3       	in	r20, 0x11	; 17
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	b9 01       	movw	r22, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	8a 95       	dec	r24
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 5a8:	cb 01       	movw	r24, r22
 5aa:	96 2f       	mov	r25, r22
 5ac:	90 95       	com	r25
 5ae:	94 23       	and	r25, r20
 5b0:	91 bb       	out	0x11, r25	; 17
 5b2:	92 b3       	in	r25, 0x12	; 18
 5b4:	89 2b       	or	r24, r25
 5b6:	82 bb       	out	0x12, r24	; 18
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	08 95       	ret
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	08 95       	ret
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	08 95       	ret
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	08 95       	ret

000005cc <DIO_Init_All>:
 5cc:	cf 93       	push	r28
 5ce:	c0 e0       	ldi	r28, 0x00	; 0
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <DIO_Init_All+0x18>
 5d2:	ec 2f       	mov	r30, r28
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	e0 5a       	subi	r30, 0xA0	; 160
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	60 81       	ld	r22, Z
 5dc:	8c 2f       	mov	r24, r28
 5de:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_initpin>
 5e2:	cf 5f       	subi	r28, 0xFF	; 255
 5e4:	c0 32       	cpi	r28, 0x20	; 32
 5e6:	a8 f3       	brcs	.-22     	; 0x5d2 <DIO_Init_All+0x6>
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <DIO_writepin>:
 5ec:	98 2f       	mov	r25, r24
 5ee:	96 95       	lsr	r25
 5f0:	96 95       	lsr	r25
 5f2:	96 95       	lsr	r25
 5f4:	87 70       	andi	r24, 0x07	; 7
 5f6:	66 23       	and	r22, r22
 5f8:	09 f4       	brne	.+2      	; 0x5fc <DIO_writepin+0x10>
 5fa:	43 c0       	rjmp	.+134    	; 0x682 <DIO_writepin+0x96>
 5fc:	61 30       	cpi	r22, 0x01	; 1
 5fe:	09 f0       	breq	.+2      	; 0x602 <DIO_writepin+0x16>
 600:	84 c0       	rjmp	.+264    	; 0x70a <DIO_writepin+0x11e>
 602:	91 30       	cpi	r25, 0x01	; 1
 604:	a1 f0       	breq	.+40     	; 0x62e <DIO_writepin+0x42>
 606:	28 f0       	brcs	.+10     	; 0x612 <DIO_writepin+0x26>
 608:	92 30       	cpi	r25, 0x02	; 2
 60a:	f9 f0       	breq	.+62     	; 0x64a <DIO_writepin+0x5e>
 60c:	93 30       	cpi	r25, 0x03	; 3
 60e:	59 f1       	breq	.+86     	; 0x666 <DIO_writepin+0x7a>
 610:	7e c0       	rjmp	.+252    	; 0x70e <DIO_writepin+0x122>
 612:	4b b3       	in	r20, 0x1b	; 27
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_writepin+0x34>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_writepin+0x30>
 624:	cb 01       	movw	r24, r22
 626:	84 2b       	or	r24, r20
 628:	8b bb       	out	0x1b, r24	; 27
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	08 95       	ret
 62e:	48 b3       	in	r20, 0x18	; 24
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	b9 01       	movw	r22, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_writepin+0x50>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	8a 95       	dec	r24
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_writepin+0x4c>
 640:	cb 01       	movw	r24, r22
 642:	84 2b       	or	r24, r20
 644:	88 bb       	out	0x18, r24	; 24
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret
 64a:	45 b3       	in	r20, 0x15	; 21
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_writepin+0x6c>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_writepin+0x68>
 65c:	cb 01       	movw	r24, r22
 65e:	84 2b       	or	r24, r20
 660:	85 bb       	out	0x15, r24	; 21
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
 666:	42 b3       	in	r20, 0x12	; 18
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_writepin+0x88>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_writepin+0x84>
 678:	cb 01       	movw	r24, r22
 67a:	84 2b       	or	r24, r20
 67c:	82 bb       	out	0x12, r24	; 18
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	08 95       	ret
 682:	91 30       	cpi	r25, 0x01	; 1
 684:	a9 f0       	breq	.+42     	; 0x6b0 <DIO_writepin+0xc4>
 686:	28 f0       	brcs	.+10     	; 0x692 <DIO_writepin+0xa6>
 688:	92 30       	cpi	r25, 0x02	; 2
 68a:	09 f1       	breq	.+66     	; 0x6ce <DIO_writepin+0xe2>
 68c:	93 30       	cpi	r25, 0x03	; 3
 68e:	71 f1       	breq	.+92     	; 0x6ec <DIO_writepin+0x100>
 690:	40 c0       	rjmp	.+128    	; 0x712 <DIO_writepin+0x126>
 692:	4b b3       	in	r20, 0x1b	; 27
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	b9 01       	movw	r22, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_writepin+0xb4>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_writepin+0xb0>
 6a4:	cb 01       	movw	r24, r22
 6a6:	80 95       	com	r24
 6a8:	84 23       	and	r24, r20
 6aa:	8b bb       	out	0x1b, r24	; 27
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	08 95       	ret
 6b0:	48 b3       	in	r20, 0x18	; 24
 6b2:	21 e0       	ldi	r18, 0x01	; 1
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	b9 01       	movw	r22, r18
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_writepin+0xd2>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	8a 95       	dec	r24
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_writepin+0xce>
 6c2:	cb 01       	movw	r24, r22
 6c4:	80 95       	com	r24
 6c6:	84 23       	and	r24, r20
 6c8:	88 bb       	out	0x18, r24	; 24
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	08 95       	ret
 6ce:	45 b3       	in	r20, 0x15	; 21
 6d0:	21 e0       	ldi	r18, 0x01	; 1
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	b9 01       	movw	r22, r18
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_writepin+0xf0>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	8a 95       	dec	r24
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_writepin+0xec>
 6e0:	cb 01       	movw	r24, r22
 6e2:	80 95       	com	r24
 6e4:	84 23       	and	r24, r20
 6e6:	85 bb       	out	0x15, r24	; 21
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret
 6ec:	42 b3       	in	r20, 0x12	; 18
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	b9 01       	movw	r22, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_writepin+0x10e>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	8a 95       	dec	r24
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_writepin+0x10a>
 6fe:	cb 01       	movw	r24, r22
 700:	80 95       	com	r24
 702:	84 23       	and	r24, r20
 704:	82 bb       	out	0x12, r24	; 18
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret
 70a:	83 e0       	ldi	r24, 0x03	; 3
 70c:	08 95       	ret
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	08 95       	ret
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret

00000716 <DIO_togglepin>:
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
 716:	98 2f       	mov	r25, r24
 718:	96 95       	lsr	r25
 71a:	96 95       	lsr	r25
 71c:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 71e:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num< 8)
	  {
		  switch(port)
 720:	91 30       	cpi	r25, 0x01	; 1
 722:	a1 f0       	breq	.+40     	; 0x74c <DIO_togglepin+0x36>
 724:	28 f0       	brcs	.+10     	; 0x730 <DIO_togglepin+0x1a>
 726:	92 30       	cpi	r25, 0x02	; 2
 728:	f9 f0       	breq	.+62     	; 0x768 <DIO_togglepin+0x52>
 72a:	93 30       	cpi	r25, 0x03	; 3
 72c:	59 f1       	breq	.+86     	; 0x784 <DIO_togglepin+0x6e>
 72e:	38 c0       	rjmp	.+112    	; 0x7a0 <DIO_togglepin+0x8a>
		  {
			  case PA:
			  TGL_BIT(PORTA,pin_num);
 730:	4b b3       	in	r20, 0x1b	; 27
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	b9 01       	movw	r22, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_togglepin+0x28>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_togglepin+0x24>
 742:	cb 01       	movw	r24, r22
 744:	84 27       	eor	r24, r20
 746:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 748:	80 e0       	ldi	r24, 0x00	; 0
	  {
		  switch(port)
		  {
			  case PA:
			  TGL_BIT(PORTA,pin_num);
			  break;
 74a:	08 95       	ret
			  case PB:
			  TGL_BIT(PORTB,pin_num);
 74c:	48 b3       	in	r20, 0x18	; 24
 74e:	21 e0       	ldi	r18, 0x01	; 1
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	b9 01       	movw	r22, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_togglepin+0x44>
 756:	66 0f       	add	r22, r22
 758:	77 1f       	adc	r23, r23
 75a:	8a 95       	dec	r24
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_togglepin+0x40>
 75e:	cb 01       	movw	r24, r22
 760:	84 27       	eor	r24, r20
 762:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 764:	80 e0       	ldi	r24, 0x00	; 0
			  case PA:
			  TGL_BIT(PORTA,pin_num);
			  break;
			  case PB:
			  TGL_BIT(PORTB,pin_num);
			  break;
 766:	08 95       	ret
			  case PC:
			  TGL_BIT(PORTC,pin_num);
 768:	45 b3       	in	r20, 0x15	; 21
 76a:	21 e0       	ldi	r18, 0x01	; 1
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	b9 01       	movw	r22, r18
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_togglepin+0x60>
 772:	66 0f       	add	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	8a 95       	dec	r24
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_togglepin+0x5c>
 77a:	cb 01       	movw	r24, r22
 77c:	84 27       	eor	r24, r20
 77e:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 780:	80 e0       	ldi	r24, 0x00	; 0
			  case PB:
			  TGL_BIT(PORTB,pin_num);
			  break;
			  case PC:
			  TGL_BIT(PORTC,pin_num);
			  break;
 782:	08 95       	ret
			  case PD:
			  TGL_BIT(PORTD,pin_num);
 784:	42 b3       	in	r20, 0x12	; 18
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	b9 01       	movw	r22, r18
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_togglepin+0x7c>
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	8a 95       	dec	r24
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_togglepin+0x78>
 796:	cb 01       	movw	r24, r22
 798:	84 27       	eor	r24, r20
 79a:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 79c:	80 e0       	ldi	r24, 0x00	; 0
			  case PC:
			  TGL_BIT(PORTC,pin_num);
			  break;
			  case PD:
			  TGL_BIT(PORTD,pin_num);
			  break;
 79e:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
 7a2:	08 95       	ret

000007a4 <__vector_1>:




ISR(INT0_vect)
{  
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	4f 93       	push	r20
 7b4:	5f 93       	push	r21
 7b6:	6f 93       	push	r22
 7b8:	7f 93       	push	r23
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 7c6:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <INT0_Fptr>
 7ca:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <INT0_Fptr+0x1>
 7ce:	30 97       	sbiw	r30, 0x00	; 0
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_1+0x30>
	{
		INT0_Fptr();
 7d2:	09 95       	icall
	}
}
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	7f 91       	pop	r23
 7e2:	6f 91       	pop	r22
 7e4:	5f 91       	pop	r21
 7e6:	4f 91       	pop	r20
 7e8:	3f 91       	pop	r19
 7ea:	2f 91       	pop	r18
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_2>:
ISR(INT1_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 818:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <INT1_Fptr>
 81c:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <INT1_Fptr+0x1>
 820:	30 97       	sbiw	r30, 0x00	; 0
 822:	09 f0       	breq	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	{
		INT1_Fptr();
 824:	09 95       	icall
	}
}
 826:	ff 91       	pop	r31
 828:	ef 91       	pop	r30
 82a:	bf 91       	pop	r27
 82c:	af 91       	pop	r26
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	7f 91       	pop	r23
 834:	6f 91       	pop	r22
 836:	5f 91       	pop	r21
 838:	4f 91       	pop	r20
 83a:	3f 91       	pop	r19
 83c:	2f 91       	pop	r18
 83e:	0f 90       	pop	r0
 840:	0f be       	out	0x3f, r0	; 63
 842:	0f 90       	pop	r0
 844:	1f 90       	pop	r1
 846:	18 95       	reti

00000848 <__vector_3>:
ISR(INT2_vect)
{
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	2f 93       	push	r18
 854:	3f 93       	push	r19
 856:	4f 93       	push	r20
 858:	5f 93       	push	r21
 85a:	6f 93       	push	r22
 85c:	7f 93       	push	r23
 85e:	8f 93       	push	r24
 860:	9f 93       	push	r25
 862:	af 93       	push	r26
 864:	bf 93       	push	r27
 866:	ef 93       	push	r30
 868:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 86a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 86e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 872:	30 97       	sbiw	r30, 0x00	; 0
 874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
	{
		INT2_Fptr();
 876:	09 95       	icall
	}
}
 878:	ff 91       	pop	r31
 87a:	ef 91       	pop	r30
 87c:	bf 91       	pop	r27
 87e:	af 91       	pop	r26
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	7f 91       	pop	r23
 886:	6f 91       	pop	r22
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <TIMER0_Init>:
	CLR_BIT(TIMSK,TOIE2);
}
/*Timer-2 Call Back functions*/
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	69 f0       	breq	.+26     	; 0x8b8 <TIMER0_Init+0x1e>
 89e:	28 f0       	brcs	.+10     	; 0x8aa <TIMER0_Init+0x10>
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	89 f0       	breq	.+34     	; 0x8c6 <TIMER0_Init+0x2c>
 8a4:	83 30       	cpi	r24, 0x03	; 3
 8a6:	b1 f0       	breq	.+44     	; 0x8d4 <TIMER0_Init+0x3a>
 8a8:	08 95       	ret
 8aa:	83 b7       	in	r24, 0x33	; 51
 8ac:	8f 7b       	andi	r24, 0xBF	; 191
 8ae:	83 bf       	out	0x33, r24	; 51
 8b0:	83 b7       	in	r24, 0x33	; 51
 8b2:	87 7f       	andi	r24, 0xF7	; 247
 8b4:	83 bf       	out	0x33, r24	; 51
 8b6:	08 95       	ret
 8b8:	83 b7       	in	r24, 0x33	; 51
 8ba:	80 64       	ori	r24, 0x40	; 64
 8bc:	83 bf       	out	0x33, r24	; 51
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	87 7f       	andi	r24, 0xF7	; 247
 8c2:	83 bf       	out	0x33, r24	; 51
 8c4:	08 95       	ret
 8c6:	83 b7       	in	r24, 0x33	; 51
 8c8:	8f 7b       	andi	r24, 0xBF	; 191
 8ca:	83 bf       	out	0x33, r24	; 51
 8cc:	83 b7       	in	r24, 0x33	; 51
 8ce:	88 60       	ori	r24, 0x08	; 8
 8d0:	83 bf       	out	0x33, r24	; 51
 8d2:	08 95       	ret
 8d4:	83 b7       	in	r24, 0x33	; 51
 8d6:	80 64       	ori	r24, 0x40	; 64
 8d8:	83 bf       	out	0x33, r24	; 51
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	88 60       	ori	r24, 0x08	; 8
 8de:	83 bf       	out	0x33, r24	; 51
 8e0:	08 95       	ret

000008e2 <timer_start>:
 8e2:	88 30       	cpi	r24, 0x08	; 8
 8e4:	40 f4       	brcc	.+16     	; 0x8f6 <timer_start+0x14>
 8e6:	93 b7       	in	r25, 0x33	; 51
 8e8:	98 7f       	andi	r25, 0xF8	; 248
 8ea:	93 bf       	out	0x33, r25	; 51
 8ec:	93 b7       	in	r25, 0x33	; 51
 8ee:	89 2b       	or	r24, r25
 8f0:	83 bf       	out	0x33, r24	; 51
 8f2:	84 e0       	ldi	r24, 0x04	; 4
 8f4:	08 95       	ret
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	08 95       	ret

000008fa <TIMER0_OV_SetCallBack>:
 8fa:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Timer0_OVF_Fptr+0x1>
 8fe:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Timer0_OVF_Fptr>
 902:	08 95       	ret

00000904 <__vector_11>:
 904:	1f 92       	push	r1
 906:	0f 92       	push	r0
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	0f 92       	push	r0
 90c:	11 24       	eor	r1, r1
 90e:	2f 93       	push	r18
 910:	3f 93       	push	r19
 912:	4f 93       	push	r20
 914:	5f 93       	push	r21
 916:	6f 93       	push	r22
 918:	7f 93       	push	r23
 91a:	8f 93       	push	r24
 91c:	9f 93       	push	r25
 91e:	af 93       	push	r26
 920:	bf 93       	push	r27
 922:	ef 93       	push	r30
 924:	ff 93       	push	r31
 926:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Timer0_OVF_Fptr>
 92a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Timer0_OVF_Fptr+0x1>
 92e:	30 97       	sbiw	r30, 0x00	; 0
 930:	09 f0       	breq	.+2      	; 0x934 <__vector_11+0x30>
 932:	09 95       	icall
 934:	ff 91       	pop	r31
 936:	ef 91       	pop	r30
 938:	bf 91       	pop	r27
 93a:	af 91       	pop	r26
 93c:	9f 91       	pop	r25
 93e:	8f 91       	pop	r24
 940:	7f 91       	pop	r23
 942:	6f 91       	pop	r22
 944:	5f 91       	pop	r21
 946:	4f 91       	pop	r20
 948:	3f 91       	pop	r19
 94a:	2f 91       	pop	r18
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

00000956 <TIMER0_OV_InterruptEnable>:
 956:	89 b7       	in	r24, 0x39	; 57
 958:	81 60       	ori	r24, 0x01	; 1
 95a:	89 bf       	out	0x39, r24	; 57
 95c:	08 95       	ret

0000095e <__vector_9>:
 95e:	1f 92       	push	r1
 960:	0f 92       	push	r0
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	0f 92       	push	r0
 966:	11 24       	eor	r1, r1
 968:	2f 93       	push	r18
 96a:	3f 93       	push	r19
 96c:	4f 93       	push	r20
 96e:	5f 93       	push	r21
 970:	6f 93       	push	r22
 972:	7f 93       	push	r23
 974:	8f 93       	push	r24
 976:	9f 93       	push	r25
 978:	af 93       	push	r26
 97a:	bf 93       	push	r27
 97c:	ef 93       	push	r30
 97e:	ff 93       	push	r31
 980:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Timer1_OVF_Fptr>
 984:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Timer1_OVF_Fptr+0x1>
 988:	30 97       	sbiw	r30, 0x00	; 0
 98a:	09 f0       	breq	.+2      	; 0x98e <__vector_9+0x30>
 98c:	09 95       	icall
 98e:	ff 91       	pop	r31
 990:	ef 91       	pop	r30
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	7f 91       	pop	r23
 99c:	6f 91       	pop	r22
 99e:	5f 91       	pop	r21
 9a0:	4f 91       	pop	r20
 9a2:	3f 91       	pop	r19
 9a4:	2f 91       	pop	r18
 9a6:	0f 90       	pop	r0
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	0f 90       	pop	r0
 9ac:	1f 90       	pop	r1
 9ae:	18 95       	reti

000009b0 <__vector_8>:
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
 9d2:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Timer1_OCB_Fptr>
 9d6:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Timer1_OCB_Fptr+0x1>
 9da:	30 97       	sbiw	r30, 0x00	; 0
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <__vector_8+0x30>
 9de:	09 95       	icall
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <__vector_6>:
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
 a20:	ef 93       	push	r30
 a22:	ff 93       	push	r31
 a24:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Timer1_ICU_Fptr>
 a28:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Timer1_ICU_Fptr+0x1>
 a2c:	30 97       	sbiw	r30, 0x00	; 0
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_6+0x30>
 a30:	09 95       	icall
 a32:	ff 91       	pop	r31
 a34:	ef 91       	pop	r30
 a36:	bf 91       	pop	r27
 a38:	af 91       	pop	r26
 a3a:	9f 91       	pop	r25
 a3c:	8f 91       	pop	r24
 a3e:	7f 91       	pop	r23
 a40:	6f 91       	pop	r22
 a42:	5f 91       	pop	r21
 a44:	4f 91       	pop	r20
 a46:	3f 91       	pop	r19
 a48:	2f 91       	pop	r18
 a4a:	0f 90       	pop	r0
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	0f 90       	pop	r0
 a50:	1f 90       	pop	r1
 a52:	18 95       	reti

00000a54 <__vector_5>:
}
/*Timer-2 ISR functions*/
ISR(TIMER2_OV_vect)
{
 a54:	1f 92       	push	r1
 a56:	0f 92       	push	r0
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	0f 92       	push	r0
 a5c:	11 24       	eor	r1, r1
 a5e:	2f 93       	push	r18
 a60:	3f 93       	push	r19
 a62:	4f 93       	push	r20
 a64:	5f 93       	push	r21
 a66:	6f 93       	push	r22
 a68:	7f 93       	push	r23
 a6a:	8f 93       	push	r24
 a6c:	9f 93       	push	r25
 a6e:	af 93       	push	r26
 a70:	bf 93       	push	r27
 a72:	ef 93       	push	r30
 a74:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 a76:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Timer2_OVF_Fptr>
 a7a:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Timer2_OVF_Fptr+0x1>
 a7e:	30 97       	sbiw	r30, 0x00	; 0
 a80:	09 f0       	breq	.+2      	; 0xa84 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
 a82:	09 95       	icall
	}
}
 a84:	ff 91       	pop	r31
 a86:	ef 91       	pop	r30
 a88:	bf 91       	pop	r27
 a8a:	af 91       	pop	r26
 a8c:	9f 91       	pop	r25
 a8e:	8f 91       	pop	r24
 a90:	7f 91       	pop	r23
 a92:	6f 91       	pop	r22
 a94:	5f 91       	pop	r21
 a96:	4f 91       	pop	r20
 a98:	3f 91       	pop	r19
 a9a:	2f 91       	pop	r18
 a9c:	0f 90       	pop	r0
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	0f 90       	pop	r0
 aa2:	1f 90       	pop	r1
 aa4:	18 95       	reti

00000aa6 <OS_IsPriorityEmpty>:
/*------------------------- LOCAL FUNCTIONS IMPLEMENTATION -------------------------*/
 static enuOSErrorStatus_t OS_IsPriorityEmpty(strOSConfigTask_t* strOSConfigTask)
{
	/* Checking if the attributes of the input struct are null */
	
	if((strOSConfigTask->u8Periodicity == 0) && (strOSConfigTask->pfTask == NULLPTR))
 aa6:	fc 01       	movw	r30, r24
 aa8:	20 81       	ld	r18, Z
 aaa:	21 11       	cpse	r18, r1
 aac:	06 c0       	rjmp	.+12     	; 0xaba <OS_IsPriorityEmpty+0x14>
 aae:	81 81       	ldd	r24, Z+1	; 0x01
 ab0:	92 81       	ldd	r25, Z+2	; 0x02
 ab2:	89 2b       	or	r24, r25
 ab4:	21 f0       	breq	.+8      	; 0xabe <OS_IsPriorityEmpty+0x18>
	{
		return PRIORITY_EMPTY ;
	}
	else
	{
		return PRIORITY_FULL ;
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	08 95       	ret
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	08 95       	ret
{
	/* Checking if the attributes of the input struct are null */
	
	if((strOSConfigTask->u8Periodicity == 0) && (strOSConfigTask->pfTask == NULLPTR))
	{
		return PRIORITY_EMPTY ;
 abe:	82 e0       	ldi	r24, 0x02	; 2
	{
		return PRIORITY_FULL ;
	}
		
	
} 
 ac0:	08 95       	ret

00000ac2 <OS_TimerCallback>:

static void OS_TimerCallback(void)   
{
	/* Incrementing the value of the tick count */
	gu64TickCounts++;
 ac2:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <gu64TickCounts>
 ac6:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <gu64TickCounts+0x1>
 aca:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <gu64TickCounts+0x2>
 ace:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <gu64TickCounts+0x3>
 ad2:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <gu64TickCounts+0x4>
 ad6:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <gu64TickCounts+0x5>
 ada:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <gu64TickCounts+0x6>
 ade:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <gu64TickCounts+0x7>
 ae2:	a1 e0       	ldi	r26, 0x01	; 1
 ae4:	0e 94 df 06 	call	0xdbe	; 0xdbe <__adddi3_s8>
 ae8:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <gu64TickCounts>
 aec:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <gu64TickCounts+0x1>
 af0:	40 93 9c 00 	sts	0x009C, r20	; 0x80009c <gu64TickCounts+0x2>
 af4:	50 93 9d 00 	sts	0x009D, r21	; 0x80009d <gu64TickCounts+0x3>
 af8:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <gu64TickCounts+0x4>
 afc:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <gu64TickCounts+0x5>
 b00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <gu64TickCounts+0x6>
 b04:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <gu64TickCounts+0x7>
	/* Raising the flag to acknowledge the scheduler that an ISR has occured */
	if (gu64TickCounts==100)
 b08:	a4 e6       	ldi	r26, 0x64	; 100
 b0a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__cmpdi2_s8>
 b0e:	b1 f5       	brne	.+108    	; 0xb7c <OS_TimerCallback+0xba>
	{
		gu8TFlag = HIGH;
 b10:	81 e0       	ldi	r24, 0x01	; 1
 b12:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <gu8TFlag>
		gu64TaskCounter++;
 b16:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <gu64TaskCounter>
 b1a:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <gu64TaskCounter+0x1>
 b1e:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <gu64TaskCounter+0x2>
 b22:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <gu64TaskCounter+0x3>
 b26:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <gu64TaskCounter+0x4>
 b2a:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <gu64TaskCounter+0x5>
 b2e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu64TaskCounter+0x6>
 b32:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu64TaskCounter+0x7>
 b36:	a1 e0       	ldi	r26, 0x01	; 1
 b38:	0e 94 df 06 	call	0xdbe	; 0xdbe <__adddi3_s8>
 b3c:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <gu64TaskCounter>
 b40:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <gu64TaskCounter+0x1>
 b44:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <gu64TaskCounter+0x2>
 b48:	50 93 95 00 	sts	0x0095, r21	; 0x800095 <gu64TaskCounter+0x3>
 b4c:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <gu64TaskCounter+0x4>
 b50:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <gu64TaskCounter+0x5>
 b54:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <gu64TaskCounter+0x6>
 b58:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <gu64TaskCounter+0x7>
		gu64TickCounts=0;
 b5c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <gu64TickCounts>
 b60:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gu64TickCounts+0x1>
 b64:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <gu64TickCounts+0x2>
 b68:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gu64TickCounts+0x3>
 b6c:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <gu64TickCounts+0x4>
 b70:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <gu64TickCounts+0x5>
 b74:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <gu64TickCounts+0x6>
 b78:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <gu64TickCounts+0x7>
 b7c:	08 95       	ret

00000b7e <OS_Init>:
	
}
/*-------------------------APIS IMPLEMENTATION -------------------------*/
enuOSErrorStatus_t OS_Init()
{
	if (gu8init_flag==0)
 b7e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu8init_flag>
 b82:	81 11       	cpse	r24, r1
 b84:	11 c0       	rjmp	.+34     	; 0xba8 <OS_Init+0x2a>
	{
		
	       gu8init_flag++;
 b86:	8f 5f       	subi	r24, 0xFF	; 255
 b88:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <gu8init_flag>
			
		    
		 	TIMER0_Init(TIMER0_NORMAL_MODE);
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	0e 94 4d 04 	call	0x89a	; 0x89a <TIMER0_Init>
		 	TIMER0_OV_InterruptEnable();
 b92:	0e 94 ab 04 	call	0x956	; 0x956 <TIMER0_OV_InterruptEnable>
		 	TIMER0_OV_SetCallBack(OS_TimerCallback);
 b96:	81 e6       	ldi	r24, 0x61	; 97
 b98:	95 e0       	ldi	r25, 0x05	; 5
 b9a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <TIMER0_OV_SetCallBack>
		 	timer_start(TIMER0_SCALER_64);
 b9e:	83 e0       	ldi	r24, 0x03	; 3
 ba0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <timer_start>
			 
			  return OS_INIT;
 ba4:	84 e0       	ldi	r24, 0x04	; 4
 ba6:	08 95       	ret
	}
	else 
	{
		return OS_ERROR;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 baa:	08 95       	ret

00000bac <OS_CreateTask>:

enuOSErrorStatus_t OS_CreateTask(u8 u8Priority, strOSConfigTask_t* strOSConfigTask)
{
 bac:	ff 92       	push	r15
 bae:	0f 93       	push	r16
 bb0:	1f 93       	push	r17
 bb2:	cf 93       	push	r28
 bb4:	df 93       	push	r29
 bb6:	f8 2e       	mov	r15, r24
 bb8:	8b 01       	movw	r16, r22
	enuOSErrorStatus_t STATUS;
	
	/* Checking if the selected task struct is empty, the task priority is less than the maximum number of tasks,
		and the input struct is not empty */
	if((OS_IsPriorityEmpty(&gastrOSConfigTasks[u8Priority]) == PRIORITY_EMPTY) && 
 bba:	c8 2f       	mov	r28, r24
 bbc:	d0 e0       	ldi	r29, 0x00	; 0
 bbe:	ce 01       	movw	r24, r28
 bc0:	88 0f       	add	r24, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	8c 0f       	add	r24, r28
 bc6:	9d 1f       	adc	r25, r29
 bc8:	8e 55       	subi	r24, 0x5E	; 94
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <OS_IsPriorityEmpty>
 bd0:	82 30       	cpi	r24, 0x02	; 2
 bd2:	b1 f4       	brne	.+44     	; 0xc00 <OS_CreateTask+0x54>
 bd4:	89 e0       	ldi	r24, 0x09	; 9
 bd6:	8f 15       	cp	r24, r15
 bd8:	a8 f0       	brcs	.+42     	; 0xc04 <OS_CreateTask+0x58>
		(u8Priority < NO_OF_TASKS) && (strOSConfigTask != NULLPTR))
 bda:	01 15       	cp	r16, r1
 bdc:	11 05       	cpc	r17, r1
 bde:	a1 f0       	breq	.+40     	; 0xc08 <OS_CreateTask+0x5c>
	{    
		/* Assigning the input struct parameters into the selected priority struct location inside the tasks array */
		gastrOSConfigTasks[u8Priority] = *strOSConfigTask;	
 be0:	ce 01       	movw	r24, r28
 be2:	88 0f       	add	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	c8 0f       	add	r28, r24
 be8:	d9 1f       	adc	r29, r25
 bea:	ce 55       	subi	r28, 0x5E	; 94
 bec:	df 4f       	sbci	r29, 0xFF	; 255
 bee:	f8 01       	movw	r30, r16
 bf0:	80 81       	ld	r24, Z
 bf2:	91 81       	ldd	r25, Z+1	; 0x01
 bf4:	a2 81       	ldd	r26, Z+2	; 0x02
 bf6:	88 83       	st	Y, r24
 bf8:	99 83       	std	Y+1, r25	; 0x01
 bfa:	aa 83       	std	Y+2, r26	; 0x02
				
		STATUS = OS_TASK_ADDED;
 bfc:	85 e0       	ldi	r24, 0x05	; 5
 bfe:	05 c0       	rjmp	.+10     	; 0xc0a <OS_CreateTask+0x5e>
	}
	else
	{
		STATUS = OS_ERROR;
 c00:	81 e0       	ldi	r24, 0x01	; 1
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <OS_CreateTask+0x5e>
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	01 c0       	rjmp	.+2      	; 0xc0a <OS_CreateTask+0x5e>
 c08:	81 e0       	ldi	r24, 0x01	; 1
	}
	return STATUS;
}
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	1f 91       	pop	r17
 c10:	0f 91       	pop	r16
 c12:	ff 90       	pop	r15
 c14:	08 95       	ret

00000c16 <OS_Run>:
	u8 u8TaskP;
	
	while(1)
	{
		/* Checking if the ISR flag is raised */
		if(gu8TFlag == HIGH)
 c16:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <gu8TFlag>
 c1a:	81 30       	cpi	r24, 0x01	; 1
 c1c:	e1 f7       	brne	.-8      	; 0xc16 <OS_Run>
 c1e:	48 c0       	rjmp	.+144    	; 0xcb0 <OS_Run+0x9a>
			/* Looping on each task to implement them based on priority */
			for(u8TaskP = 1; u8TaskP <= NO_OF_TASKS; u8TaskP++)
			{ 
				/* Checking if the selected task struct is not empty and the task's periodicity has come */
				if(
				(OS_IsPriorityEmpty(&gastrOSConfigTasks[u8TaskP]) != PRIORITY_EMPTY)
 c20:	c9 2d       	mov	r28, r9
 c22:	d0 e0       	ldi	r29, 0x00	; 0
 c24:	ce 01       	movw	r24, r28
 c26:	88 0f       	add	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	8c 0f       	add	r24, r28
 c2c:	9d 1f       	adc	r25, r29
 c2e:	8e 55       	subi	r24, 0x5E	; 94
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	0e 94 53 05 	call	0xaa6	; 0xaa6 <OS_IsPriorityEmpty>
		{
			/* Looping on each task to implement them based on priority */
			for(u8TaskP = 1; u8TaskP <= NO_OF_TASKS; u8TaskP++)
			{ 
				/* Checking if the selected task struct is not empty and the task's periodicity has come */
				if(
 c36:	82 30       	cpi	r24, 0x02	; 2
 c38:	c9 f1       	breq	.+114    	; 0xcac <OS_Run+0x96>
				(OS_IsPriorityEmpty(&gastrOSConfigTasks[u8TaskP]) != PRIORITY_EMPTY)
				 &&
				((gu64TaskCounter % (gastrOSConfigTasks[u8TaskP].u8Periodicity) ) == 0)
 c3a:	fe 01       	movw	r30, r28
 c3c:	ee 0f       	add	r30, r30
 c3e:	ff 1f       	adc	r31, r31
 c40:	ec 0f       	add	r30, r28
 c42:	fd 1f       	adc	r31, r29
 c44:	ee 55       	subi	r30, 0x5E	; 94
 c46:	ff 4f       	sbci	r31, 0xFF	; 255
 c48:	a0 80       	ld	r10, Z
 c4a:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <gu64TaskCounter>
 c4e:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <gu64TaskCounter+0x1>
 c52:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <gu64TaskCounter+0x2>
 c56:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <gu64TaskCounter+0x3>
 c5a:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <gu64TaskCounter+0x4>
 c5e:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <gu64TaskCounter+0x5>
 c62:	b1 2c       	mov	r11, r1
 c64:	c1 2c       	mov	r12, r1
 c66:	d1 2c       	mov	r13, r1
 c68:	e1 2c       	mov	r14, r1
 c6a:	f1 2c       	mov	r15, r1
 c6c:	00 e0       	ldi	r16, 0x00	; 0
 c6e:	10 e0       	ldi	r17, 0x00	; 0
 c70:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <gu64TaskCounter+0x6>
 c74:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gu64TaskCounter+0x7>
 c78:	0e 94 80 06 	call	0xd00	; 0xd00 <__umoddi3>
			for(u8TaskP = 1; u8TaskP <= NO_OF_TASKS; u8TaskP++)
			{ 
				/* Checking if the selected task struct is not empty and the task's periodicity has come */
				if(
				(OS_IsPriorityEmpty(&gastrOSConfigTasks[u8TaskP]) != PRIORITY_EMPTY)
				 &&
 c7c:	a0 e0       	ldi	r26, 0x00	; 0
 c7e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__cmpdi2_s8>
 c82:	a1 f4       	brne	.+40     	; 0xcac <OS_Run+0x96>
				((gu64TaskCounter % (gastrOSConfigTasks[u8TaskP].u8Periodicity) ) == 0)
				)
				{
					/* Calling the task's function */
					gastrOSConfigTasks[u8TaskP].pfTask();
 c84:	ce 01       	movw	r24, r28
 c86:	88 0f       	add	r24, r24
 c88:	99 1f       	adc	r25, r25
 c8a:	c8 0f       	add	r28, r24
 c8c:	d9 1f       	adc	r29, r25
 c8e:	ce 55       	subi	r28, 0x5E	; 94
 c90:	df 4f       	sbci	r29, 0xFF	; 255
 c92:	e9 81       	ldd	r30, Y+1	; 0x01
 c94:	fa 81       	ldd	r31, Y+2	; 0x02
 c96:	09 95       	icall
					LCD_SetCursor(0,0);
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_SetCursor>
					LCD_WriteNumber(u8TaskP);
 ca0:	69 2d       	mov	r22, r9
 ca2:	70 e0       	ldi	r23, 0x00	; 0
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 39 01 	call	0x272	; 0x272 <LCD_WriteNumber>
	{
		/* Checking if the ISR flag is raised */
		if(gu8TFlag == HIGH)
		{
			/* Looping on each task to implement them based on priority */
			for(u8TaskP = 1; u8TaskP <= NO_OF_TASKS; u8TaskP++)
 cac:	93 94       	inc	r9
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <OS_Run+0x9e>
 cb0:	99 24       	eor	r9, r9
 cb2:	93 94       	inc	r9
 cb4:	8a e0       	ldi	r24, 0x0A	; 10
 cb6:	89 15       	cp	r24, r9
 cb8:	08 f0       	brcs	.+2      	; 0xcbc <OS_Run+0xa6>
 cba:	b2 cf       	rjmp	.-156    	; 0xc20 <OS_Run+0xa>
					
				}
		
			}
			/* Lowering the ISR flag to detect the next tick time */
			gu8TFlag  = LOW;
 cbc:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <gu8TFlag>
 cc0:	aa cf       	rjmp	.-172    	; 0xc16 <OS_Run>

00000cc2 <__divmodsi4>:
 cc2:	05 2e       	mov	r0, r21
 cc4:	97 fb       	bst	r25, 7
 cc6:	1e f4       	brtc	.+6      	; 0xcce <__divmodsi4+0xc>
 cc8:	00 94       	com	r0
 cca:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__negsi2>
 cce:	57 fd       	sbrc	r21, 7
 cd0:	07 d0       	rcall	.+14     	; 0xce0 <__divmodsi4_neg2>
 cd2:	0e 94 f7 06 	call	0xdee	; 0xdee <__udivmodsi4>
 cd6:	07 fc       	sbrc	r0, 7
 cd8:	03 d0       	rcall	.+6      	; 0xce0 <__divmodsi4_neg2>
 cda:	4e f4       	brtc	.+18     	; 0xcee <__divmodsi4_exit>
 cdc:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__negsi2>

00000ce0 <__divmodsi4_neg2>:
 ce0:	50 95       	com	r21
 ce2:	40 95       	com	r20
 ce4:	30 95       	com	r19
 ce6:	21 95       	neg	r18
 ce8:	3f 4f       	sbci	r19, 0xFF	; 255
 cea:	4f 4f       	sbci	r20, 0xFF	; 255
 cec:	5f 4f       	sbci	r21, 0xFF	; 255

00000cee <__divmodsi4_exit>:
 cee:	08 95       	ret

00000cf0 <__negsi2>:
 cf0:	90 95       	com	r25
 cf2:	80 95       	com	r24
 cf4:	70 95       	com	r23
 cf6:	61 95       	neg	r22
 cf8:	7f 4f       	sbci	r23, 0xFF	; 255
 cfa:	8f 4f       	sbci	r24, 0xFF	; 255
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	08 95       	ret

00000d00 <__umoddi3>:
 d00:	68 94       	set
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <__udivdi3_umoddi3>

00000d04 <__udivdi3>:
 d04:	e8 94       	clt

00000d06 <__udivdi3_umoddi3>:
 d06:	8f 92       	push	r8
 d08:	9f 92       	push	r9
 d0a:	cf 93       	push	r28
 d0c:	df 93       	push	r29
 d0e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__udivmod64>
 d12:	df 91       	pop	r29
 d14:	cf 91       	pop	r28
 d16:	9f 90       	pop	r9
 d18:	8f 90       	pop	r8
 d1a:	08 95       	ret

00000d1c <__udivmod64>:
 d1c:	88 24       	eor	r8, r8
 d1e:	99 24       	eor	r9, r9
 d20:	f4 01       	movw	r30, r8
 d22:	e4 01       	movw	r28, r8
 d24:	b0 e4       	ldi	r27, 0x40	; 64
 d26:	9f 93       	push	r25
 d28:	aa 27       	eor	r26, r26
 d2a:	9a 15       	cp	r25, r10
 d2c:	8b 04       	cpc	r8, r11
 d2e:	9c 04       	cpc	r9, r12
 d30:	ed 05       	cpc	r30, r13
 d32:	fe 05       	cpc	r31, r14
 d34:	cf 05       	cpc	r28, r15
 d36:	d0 07       	cpc	r29, r16
 d38:	a1 07       	cpc	r26, r17
 d3a:	98 f4       	brcc	.+38     	; 0xd62 <__udivmod64+0x46>
 d3c:	ad 2f       	mov	r26, r29
 d3e:	dc 2f       	mov	r29, r28
 d40:	cf 2f       	mov	r28, r31
 d42:	fe 2f       	mov	r31, r30
 d44:	e9 2d       	mov	r30, r9
 d46:	98 2c       	mov	r9, r8
 d48:	89 2e       	mov	r8, r25
 d4a:	98 2f       	mov	r25, r24
 d4c:	87 2f       	mov	r24, r23
 d4e:	76 2f       	mov	r23, r22
 d50:	65 2f       	mov	r22, r21
 d52:	54 2f       	mov	r21, r20
 d54:	43 2f       	mov	r20, r19
 d56:	32 2f       	mov	r19, r18
 d58:	22 27       	eor	r18, r18
 d5a:	b8 50       	subi	r27, 0x08	; 8
 d5c:	31 f7       	brne	.-52     	; 0xd2a <__udivmod64+0xe>
 d5e:	bf 91       	pop	r27
 d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__udivmod64+0x94>
 d62:	1b 2e       	mov	r1, r27
 d64:	bf 91       	pop	r27
 d66:	bb 27       	eor	r27, r27
 d68:	22 0f       	add	r18, r18
 d6a:	33 1f       	adc	r19, r19
 d6c:	44 1f       	adc	r20, r20
 d6e:	55 1f       	adc	r21, r21
 d70:	66 1f       	adc	r22, r22
 d72:	77 1f       	adc	r23, r23
 d74:	88 1f       	adc	r24, r24
 d76:	99 1f       	adc	r25, r25
 d78:	88 1c       	adc	r8, r8
 d7a:	99 1c       	adc	r9, r9
 d7c:	ee 1f       	adc	r30, r30
 d7e:	ff 1f       	adc	r31, r31
 d80:	cc 1f       	adc	r28, r28
 d82:	dd 1f       	adc	r29, r29
 d84:	aa 1f       	adc	r26, r26
 d86:	bb 1f       	adc	r27, r27
 d88:	8a 14       	cp	r8, r10
 d8a:	9b 04       	cpc	r9, r11
 d8c:	ec 05       	cpc	r30, r12
 d8e:	fd 05       	cpc	r31, r13
 d90:	ce 05       	cpc	r28, r14
 d92:	df 05       	cpc	r29, r15
 d94:	a0 07       	cpc	r26, r16
 d96:	b1 07       	cpc	r27, r17
 d98:	48 f0       	brcs	.+18     	; 0xdac <__udivmod64+0x90>
 d9a:	8a 18       	sub	r8, r10
 d9c:	9b 08       	sbc	r9, r11
 d9e:	ec 09       	sbc	r30, r12
 da0:	fd 09       	sbc	r31, r13
 da2:	ce 09       	sbc	r28, r14
 da4:	df 09       	sbc	r29, r15
 da6:	a0 0b       	sbc	r26, r16
 da8:	b1 0b       	sbc	r27, r17
 daa:	21 60       	ori	r18, 0x01	; 1
 dac:	1a 94       	dec	r1
 dae:	e1 f6       	brne	.-72     	; 0xd68 <__udivmod64+0x4c>
 db0:	2e f4       	brtc	.+10     	; 0xdbc <__udivmod64+0xa0>
 db2:	94 01       	movw	r18, r8
 db4:	af 01       	movw	r20, r30
 db6:	be 01       	movw	r22, r28
 db8:	cd 01       	movw	r24, r26
 dba:	00 0c       	add	r0, r0
 dbc:	08 95       	ret

00000dbe <__adddi3_s8>:
 dbe:	00 24       	eor	r0, r0
 dc0:	a7 fd       	sbrc	r26, 7
 dc2:	00 94       	com	r0
 dc4:	2a 0f       	add	r18, r26
 dc6:	30 1d       	adc	r19, r0
 dc8:	40 1d       	adc	r20, r0
 dca:	50 1d       	adc	r21, r0
 dcc:	60 1d       	adc	r22, r0
 dce:	70 1d       	adc	r23, r0
 dd0:	80 1d       	adc	r24, r0
 dd2:	90 1d       	adc	r25, r0
 dd4:	08 95       	ret

00000dd6 <__cmpdi2_s8>:
 dd6:	00 24       	eor	r0, r0
 dd8:	a7 fd       	sbrc	r26, 7
 dda:	00 94       	com	r0
 ddc:	2a 17       	cp	r18, r26
 dde:	30 05       	cpc	r19, r0
 de0:	40 05       	cpc	r20, r0
 de2:	50 05       	cpc	r21, r0
 de4:	60 05       	cpc	r22, r0
 de6:	70 05       	cpc	r23, r0
 de8:	80 05       	cpc	r24, r0
 dea:	90 05       	cpc	r25, r0
 dec:	08 95       	ret

00000dee <__udivmodsi4>:
 dee:	a1 e2       	ldi	r26, 0x21	; 33
 df0:	1a 2e       	mov	r1, r26
 df2:	aa 1b       	sub	r26, r26
 df4:	bb 1b       	sub	r27, r27
 df6:	fd 01       	movw	r30, r26
 df8:	0d c0       	rjmp	.+26     	; 0xe14 <__udivmodsi4_ep>

00000dfa <__udivmodsi4_loop>:
 dfa:	aa 1f       	adc	r26, r26
 dfc:	bb 1f       	adc	r27, r27
 dfe:	ee 1f       	adc	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	a2 17       	cp	r26, r18
 e04:	b3 07       	cpc	r27, r19
 e06:	e4 07       	cpc	r30, r20
 e08:	f5 07       	cpc	r31, r21
 e0a:	20 f0       	brcs	.+8      	; 0xe14 <__udivmodsi4_ep>
 e0c:	a2 1b       	sub	r26, r18
 e0e:	b3 0b       	sbc	r27, r19
 e10:	e4 0b       	sbc	r30, r20
 e12:	f5 0b       	sbc	r31, r21

00000e14 <__udivmodsi4_ep>:
 e14:	66 1f       	adc	r22, r22
 e16:	77 1f       	adc	r23, r23
 e18:	88 1f       	adc	r24, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	1a 94       	dec	r1
 e1e:	69 f7       	brne	.-38     	; 0xdfa <__udivmodsi4_loop>
 e20:	60 95       	com	r22
 e22:	70 95       	com	r23
 e24:	80 95       	com	r24
 e26:	90 95       	com	r25
 e28:	9b 01       	movw	r18, r22
 e2a:	ac 01       	movw	r20, r24
 e2c:	bd 01       	movw	r22, r26
 e2e:	cf 01       	movw	r24, r30
 e30:	08 95       	ret

00000e32 <_exit>:
 e32:	f8 94       	cli

00000e34 <__stop_program>:
 e34:	ff cf       	rjmp	.-2      	; 0xe34 <__stop_program>
