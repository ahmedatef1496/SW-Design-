
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000a52  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080008c  0080008c  00000b12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002638  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca7  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015fb  00000000  00000000  00004137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000874  00000000  00000000  00005734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001063  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021d5  00000000  00000000  0000700b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_1>
   8:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_2>
   c:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_5>
  18:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_8>
  24:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 88 01 	call	0x310	; 0x310 <main>
  8a:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteIns>:
	
}

#elif LCD_MODE ==_4_BIT
static void WriteIns(u8 ins)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	
	
	DIO_writepin(RS,LOW);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D7,READ_BIT(ins,7));
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D6,READ_BIT(ins,6));
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D5,READ_BIT(ins,5));
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D4,READ_BIT(ins,4));
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	
	DIO_writepin(EN,HIGH);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteIns+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteIns+0x50>
  e2:	00 00       	nop
	_delay_ms(1);
	DIO_writepin(EN,LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteIns+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteIns+0x64>
  f6:	00 00       	nop
	_delay_ms(1);
	DIO_writepin(D7,READ_BIT(ins,3));
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D6,READ_BIT(ins,2));
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D5,READ_BIT(ins,1));
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D4,READ_BIT(ins,0));
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(EN,HIGH);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteIns+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteIns+0xa6>
 138:	00 00       	nop
	_delay_ms(1);
	DIO_writepin(EN,LOW);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteIns+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteIns+0xba>
 14c:	00 00       	nop
	_delay_ms(1);
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteData>:

static void WriteData(u8 data)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	DIO_writepin(RS,HIGH);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D7,READ_BIT(data,7));
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D6,READ_BIT(data,6));
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D5,READ_BIT(data,5));
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D4,READ_BIT(data,4));
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>

	DIO_writepin(EN,HIGH);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
 1a2:	00 00       	nop
	_delay_ms(1);
	DIO_writepin(EN,LOW);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
 1b6:	00 00       	nop
	_delay_ms(1);
	DIO_writepin(D7,READ_BIT(data,3));
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D6,READ_BIT(data,2));
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D5,READ_BIT(data,1));
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(D4,READ_BIT(data,0));
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
	DIO_writepin(EN,HIGH);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
 1f8:	00 00       	nop
	_delay_ms(1);
	DIO_writepin(EN,LOW);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_writepin>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
 20c:	00 00       	nop
	_delay_ms(1);
}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop


void LCD_Init(void)
{
	_delay_ms(50);
	WriteIns(0x02);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	WriteIns(0x28);//5*7 2 lines
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
	WriteIns(0x01);//clear screen
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 23c:	8f e9       	ldi	r24, 0x9F	; 159
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 24e:	08 95       	ret

00000250 <LCD_WriteChar>:
#endif

//should be send address in ddram befor this function
void LCD_WriteChar(u8 ch)
{
	WriteData(ch);
 250:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
 254:	08 95       	ret

00000256 <LCD_WriteString>:
}
void LCD_WriteString(u8*str)
{
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	8c 01       	movw	r16, r24
	u8 i;
	for (i=0;str[i];i++)
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	03 c0       	rjmp	.+6      	; 0x268 <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
 262:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WriteChar>
	WriteData(ch);
}
void LCD_WriteString(u8*str)
{
	u8 i;
	for (i=0;str[i];i++)
 266:	cf 5f       	subi	r28, 0xFF	; 255
 268:	f8 01       	movw	r30, r16
 26a:	ec 0f       	add	r30, r28
 26c:	f1 1d       	adc	r31, r1
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	f7 cf       	rjmp	.-18     	; 0x262 <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i]);
	}
	
}
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <LCD_SetCursor>:
void LCD_SetCursor(u8 line,u8 cell)
{
	if (line==0)
 27c:	81 11       	cpse	r24, r1
 27e:	05 c0       	rjmp	.+10     	; 0x28a <LCD_SetCursor+0xe>
	{
		WriteIns(0x80|cell);
 280:	86 2f       	mov	r24, r22
 282:	80 68       	ori	r24, 0x80	; 128
 284:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 288:	08 95       	ret
	}
	else if (line ==1)
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	21 f4       	brne	.+8      	; 0x296 <LCD_SetCursor+0x1a>
	{
		WriteIns(0x80+0x40+cell);
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	86 0f       	add	r24, r22
 292:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 296:	08 95       	ret

00000298 <timer>:
 */ 
#include "os/os.h"
u32 volatile static g_c=0,g_t_c=0;
void timer()
{ 
	 g_c++;                                //1ms
 298:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_c>
 29c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_c+0x1>
 2a0:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <g_c+0x2>
 2a4:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <g_c+0x3>
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	a1 1d       	adc	r26, r1
 2ac:	b1 1d       	adc	r27, r1
 2ae:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <g_c>
 2b2:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <g_c+0x1>
 2b6:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <g_c+0x2>
 2ba:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <g_c+0x3>
          if (g_c==100)                   //100ms
 2be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_c>
 2c2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_c+0x1>
 2c6:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <g_c+0x2>
 2ca:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <g_c+0x3>
 2ce:	84 36       	cpi	r24, 0x64	; 100
 2d0:	91 05       	cpc	r25, r1
 2d2:	a1 05       	cpc	r26, r1
 2d4:	b1 05       	cpc	r27, r1
 2d6:	d9 f4       	brne	.+54     	; 0x30e <timer+0x76>
          {
			 // DIO_togglepin(PINB0);
			  g_t_c++;
 2d8:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 2dc:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
 2e0:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <__data_end+0x2>
 2e4:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <__data_end+0x3>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 2f2:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
 2f6:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <__data_end+0x2>
 2fa:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <__data_end+0x3>
			  g_c=0;
 2fe:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <g_c>
 302:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <g_c+0x1>
 306:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <g_c+0x2>
 30a:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <g_c+0x3>
 30e:	08 95       	ret

00000310 <main>:
	
}

int main(void)
{ 
	DIO_Init_All();
 310:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_Init_All>
	LCD_Init();
 314:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	TIMER0_Init(TIMER0_NORMAL_MODE);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <TIMER0_Init>
	GLOBALE_ENABLE();
 31e:	78 94       	sei
	TIMER0_OV_InterruptEnable();
 320:	0e 94 5d 04 	call	0x8ba	; 0x8ba <TIMER0_OV_InterruptEnable>
	

	TIMER0_OV_SetCallBack(timer);
 324:	8c e4       	ldi	r24, 0x4C	; 76
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 2f 04 	call	0x85e	; 0x85e <TIMER0_OV_SetCallBack>
	
	timer_start(TIMER0_SCALER_64);
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 23 04 	call	0x846	; 0x846 <timer_start>
		 while(1)
		 { 
			 if (g_t_c%3==0)   
 332:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <__data_end>
 336:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <__data_end+0x1>
 33a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end+0x2>
 33e:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x3>
 342:	23 e0       	ldi	r18, 0x03	; 3
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 34e:	67 2b       	or	r22, r23
 350:	68 2b       	or	r22, r24
 352:	69 2b       	or	r22, r25
 354:	41 f4       	brne	.+16     	; 0x366 <main+0x56>
			 {
				   //  DIO_togglepin(PINB0);
				   LCD_SetCursor(0,0);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
				   LCD_WriteString("task1");
 35e:	80 e6       	ldi	r24, 0x60	; 96
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
			 }
			 			  if (g_t_c%5==0)  
 366:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <__data_end>
 36a:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <__data_end+0x1>
 36e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end+0x2>
 372:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x3>
 376:	25 e0       	ldi	r18, 0x05	; 5
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 382:	67 2b       	or	r22, r23
 384:	68 2b       	or	r22, r24
 386:	69 2b       	or	r22, r25
 388:	a1 f6       	brne	.-88     	; 0x332 <main+0x22>
			 			 {
				 			 // DIO_togglepin(PINB1);
									   LCD_SetCursor(0,0);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_SetCursor>
									   LCD_WriteString("task2");
 392:	86 e6       	ldi	r24, 0x66	; 102
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteString>
 39a:	cb cf       	rjmp	.-106    	; 0x332 <main+0x22>

0000039c <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
 39c:	98 2f       	mov	r25, r24
 39e:	96 95       	lsr	r25
 3a0:	96 95       	lsr	r25
 3a2:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 3a4:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
 3a6:	61 30       	cpi	r22, 0x01	; 1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_initpin+0x10>
 3aa:	59 c0       	rjmp	.+178    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 3ac:	20 f0       	brcs	.+8      	; 0x3b6 <DIO_initpin+0x1a>
 3ae:	62 30       	cpi	r22, 0x02	; 2
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_initpin+0x18>
 3b2:	a9 c0       	rjmp	.+338    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 3b4:	fc c0       	rjmp	.+504    	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
		  {
			  case OUTPUT:
			  switch(port)
 3b6:	91 30       	cpi	r25, 0x01	; 1
 3b8:	c9 f0       	breq	.+50     	; 0x3ec <DIO_initpin+0x50>
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <DIO_initpin+0x2a>
 3bc:	92 30       	cpi	r25, 0x02	; 2
 3be:	49 f1       	breq	.+82     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3c0:	93 30       	cpi	r25, 0x03	; 3
 3c2:	d1 f1       	breq	.+116    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3c4:	f6 c0       	rjmp	.+492    	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
 3c6:	4a b3       	in	r20, 0x1a	; 26
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b9 01       	movw	r22, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_initpin+0x38>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_initpin+0x34>
 3d8:	cb 01       	movw	r24, r22
 3da:	94 2f       	mov	r25, r20
 3dc:	98 2b       	or	r25, r24
 3de:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
 3e0:	9b b3       	in	r25, 0x1b	; 27
 3e2:	80 95       	com	r24
 3e4:	89 23       	and	r24, r25
 3e6:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
 3ea:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
 3ec:	47 b3       	in	r20, 0x17	; 23
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_initpin+0x5e>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_initpin+0x5a>
 3fe:	cb 01       	movw	r24, r22
 400:	94 2f       	mov	r25, r20
 402:	98 2b       	or	r25, r24
 404:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
 406:	98 b3       	in	r25, 0x18	; 24
 408:	80 95       	com	r24
 40a:	89 23       	and	r24, r25
 40c:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 40e:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
 410:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
 412:	44 b3       	in	r20, 0x14	; 20
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	cb 01       	movw	r24, r22
 426:	94 2f       	mov	r25, r20
 428:	98 2b       	or	r25, r24
 42a:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
 42c:	95 b3       	in	r25, 0x15	; 21
 42e:	80 95       	com	r24
 430:	89 23       	and	r24, r25
 432:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 434:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
 436:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
 438:	41 b3       	in	r20, 0x11	; 17
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	94 2f       	mov	r25, r20
 44e:	98 2b       	or	r25, r24
 450:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
 452:	92 b3       	in	r25, 0x12	; 18
 454:	80 95       	com	r24
 456:	89 23       	and	r24, r25
 458:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 45a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
 45c:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
 45e:	91 30       	cpi	r25, 0x01	; 1
 460:	c9 f0       	breq	.+50     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 462:	28 f0       	brcs	.+10     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 464:	92 30       	cpi	r25, 0x02	; 2
 466:	49 f1       	breq	.+82     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 468:	93 30       	cpi	r25, 0x03	; 3
 46a:	d1 f1       	breq	.+116    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 46c:	a4 c0       	rjmp	.+328    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
 46e:	4a b3       	in	r20, 0x1a	; 26
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	cb 01       	movw	r24, r22
 482:	80 95       	com	r24
 484:	94 2f       	mov	r25, r20
 486:	98 23       	and	r25, r24
 488:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
 48a:	9b b3       	in	r25, 0x1b	; 27
 48c:	89 23       	and	r24, r25
 48e:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 490:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
 492:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
 494:	47 b3       	in	r20, 0x17	; 23
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	cb 01       	movw	r24, r22
 4a8:	80 95       	com	r24
 4aa:	94 2f       	mov	r25, r20
 4ac:	98 23       	and	r25, r24
 4ae:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
 4b0:	98 b3       	in	r25, 0x18	; 24
 4b2:	89 23       	and	r24, r25
 4b4:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
 4b8:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
 4ba:	44 b3       	in	r20, 0x14	; 20
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	b9 01       	movw	r22, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	8a 95       	dec	r24
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4cc:	cb 01       	movw	r24, r22
 4ce:	80 95       	com	r24
 4d0:	94 2f       	mov	r25, r20
 4d2:	98 23       	and	r25, r24
 4d4:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
 4d6:	95 b3       	in	r25, 0x15	; 21
 4d8:	89 23       	and	r24, r25
 4da:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
 4de:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
 4e0:	41 b3       	in	r20, 0x11	; 17
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	b9 01       	movw	r22, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	8a 95       	dec	r24
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4f2:	cb 01       	movw	r24, r22
 4f4:	80 95       	com	r24
 4f6:	94 2f       	mov	r25, r20
 4f8:	98 23       	and	r25, r24
 4fa:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
 4fc:	92 b3       	in	r25, 0x12	; 18
 4fe:	89 23       	and	r24, r25
 500:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 502:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
 504:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
 506:	91 30       	cpi	r25, 0x01	; 1
 508:	c9 f0       	breq	.+50     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 50a:	28 f0       	brcs	.+10     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 50c:	92 30       	cpi	r25, 0x02	; 2
 50e:	49 f1       	breq	.+82     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 510:	93 30       	cpi	r25, 0x03	; 3
 512:	d1 f1       	breq	.+116    	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 514:	52 c0       	rjmp	.+164    	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
 516:	4a b3       	in	r20, 0x1a	; 26
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	cb 01       	movw	r24, r22
 52a:	96 2f       	mov	r25, r22
 52c:	90 95       	com	r25
 52e:	94 23       	and	r25, r20
 530:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
 532:	9b b3       	in	r25, 0x1b	; 27
 534:	89 2b       	or	r24, r25
 536:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 538:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
 53a:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
 53c:	47 b3       	in	r20, 0x17	; 23
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	b9 01       	movw	r22, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	8a 95       	dec	r24
 54c:	e2 f7       	brpl	.-8      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 54e:	cb 01       	movw	r24, r22
 550:	96 2f       	mov	r25, r22
 552:	90 95       	com	r25
 554:	94 23       	and	r25, r20
 556:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
 558:	98 b3       	in	r25, 0x18	; 24
 55a:	89 2b       	or	r24, r25
 55c:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 55e:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
 560:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
 562:	44 b3       	in	r20, 0x14	; 20
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 574:	cb 01       	movw	r24, r22
 576:	96 2f       	mov	r25, r22
 578:	90 95       	com	r25
 57a:	94 23       	and	r25, r20
 57c:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
 57e:	95 b3       	in	r25, 0x15	; 21
 580:	89 2b       	or	r24, r25
 582:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 584:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
 586:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
 588:	41 b3       	in	r20, 0x11	; 17
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 59a:	cb 01       	movw	r24, r22
 59c:	96 2f       	mov	r25, r22
 59e:	90 95       	com	r25
 5a0:	94 23       	and	r25, r20
 5a2:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
 5a4:	92 b3       	in	r25, 0x12	; 18
 5a6:	89 2b       	or	r24, r25
 5a8:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
 5ac:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
 5bc:	08 95       	ret

000005be <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
 5be:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
 5c0:	c0 e0       	ldi	r28, 0x00	; 0
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
 5c4:	ec 2f       	mov	r30, r28
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	e4 59       	subi	r30, 0x94	; 148
 5ca:	ff 4f       	sbci	r31, 0xFF	; 255
 5cc:	60 81       	ld	r22, Z
 5ce:	8c 2f       	mov	r24, r28
 5d0:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
 5d4:	cf 5f       	subi	r28, 0xFF	; 255
 5d6:	c0 32       	cpi	r28, 0x20	; 32
 5d8:	a8 f3       	brcs	.-22     	; 0x5c4 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
 5de:	98 2f       	mov	r25, r24
 5e0:	96 95       	lsr	r25
 5e2:	96 95       	lsr	r25
 5e4:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 5e6:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
 5e8:	66 23       	and	r22, r22
 5ea:	09 f4       	brne	.+2      	; 0x5ee <DIO_writepin+0x10>
 5ec:	43 c0       	rjmp	.+134    	; 0x674 <DIO_writepin+0x96>
 5ee:	61 30       	cpi	r22, 0x01	; 1
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <DIO_writepin+0x16>
 5f2:	84 c0       	rjmp	.+264    	; 0x6fc <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
 5f4:	91 30       	cpi	r25, 0x01	; 1
 5f6:	a1 f0       	breq	.+40     	; 0x620 <DIO_writepin+0x42>
 5f8:	28 f0       	brcs	.+10     	; 0x604 <DIO_writepin+0x26>
 5fa:	92 30       	cpi	r25, 0x02	; 2
 5fc:	f9 f0       	breq	.+62     	; 0x63c <DIO_writepin+0x5e>
 5fe:	93 30       	cpi	r25, 0x03	; 3
 600:	59 f1       	breq	.+86     	; 0x658 <DIO_writepin+0x7a>
 602:	7e c0       	rjmp	.+252    	; 0x700 <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
 604:	4b b3       	in	r20, 0x1b	; 27
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	b9 01       	movw	r22, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_writepin+0x34>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	8a 95       	dec	r24
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_writepin+0x30>
 616:	cb 01       	movw	r24, r22
 618:	84 2b       	or	r24, r20
 61a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 61c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
 61e:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
 620:	48 b3       	in	r20, 0x18	; 24
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	b9 01       	movw	r22, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_writepin+0x50>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_writepin+0x4c>
 632:	cb 01       	movw	r24, r22
 634:	84 2b       	or	r24, r20
 636:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 638:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
 63a:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
 63c:	45 b3       	in	r20, 0x15	; 21
 63e:	21 e0       	ldi	r18, 0x01	; 1
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	b9 01       	movw	r22, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_writepin+0x6c>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_writepin+0x68>
 64e:	cb 01       	movw	r24, r22
 650:	84 2b       	or	r24, r20
 652:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 654:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
 656:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
 658:	42 b3       	in	r20, 0x12	; 18
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	b9 01       	movw	r22, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_writepin+0x88>
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	8a 95       	dec	r24
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_writepin+0x84>
 66a:	cb 01       	movw	r24, r22
 66c:	84 2b       	or	r24, r20
 66e:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 670:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
 672:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
 674:	91 30       	cpi	r25, 0x01	; 1
 676:	a9 f0       	breq	.+42     	; 0x6a2 <DIO_writepin+0xc4>
 678:	28 f0       	brcs	.+10     	; 0x684 <DIO_writepin+0xa6>
 67a:	92 30       	cpi	r25, 0x02	; 2
 67c:	09 f1       	breq	.+66     	; 0x6c0 <DIO_writepin+0xe2>
 67e:	93 30       	cpi	r25, 0x03	; 3
 680:	71 f1       	breq	.+92     	; 0x6de <DIO_writepin+0x100>
 682:	40 c0       	rjmp	.+128    	; 0x704 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
 684:	4b b3       	in	r20, 0x1b	; 27
 686:	21 e0       	ldi	r18, 0x01	; 1
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	b9 01       	movw	r22, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_writepin+0xb4>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	8a 95       	dec	r24
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_writepin+0xb0>
 696:	cb 01       	movw	r24, r22
 698:	80 95       	com	r24
 69a:	84 23       	and	r24, r20
 69c:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 69e:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
 6a0:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
 6a2:	48 b3       	in	r20, 0x18	; 24
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	b9 01       	movw	r22, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_writepin+0xd2>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_writepin+0xce>
 6b4:	cb 01       	movw	r24, r22
 6b6:	80 95       	com	r24
 6b8:	84 23       	and	r24, r20
 6ba:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
 6be:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
 6c0:	45 b3       	in	r20, 0x15	; 21
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	b9 01       	movw	r22, r18
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_writepin+0xf0>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	8a 95       	dec	r24
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_writepin+0xec>
 6d2:	cb 01       	movw	r24, r22
 6d4:	80 95       	com	r24
 6d6:	84 23       	and	r24, r20
 6d8:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 6da:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
 6dc:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
 6de:	42 b3       	in	r20, 0x12	; 18
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	b9 01       	movw	r22, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_writepin+0x10e>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	8a 95       	dec	r24
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_writepin+0x10a>
 6f0:	cb 01       	movw	r24, r22
 6f2:	80 95       	com	r24
 6f4:	84 23       	and	r24, r20
 6f6:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
 6fa:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 704:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
 706:	08 95       	ret

00000708 <__vector_1>:




ISR(INT0_vect)
{  
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	4f 93       	push	r20
 718:	5f 93       	push	r21
 71a:	6f 93       	push	r22
 71c:	7f 93       	push	r23
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	af 93       	push	r26
 724:	bf 93       	push	r27
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 72a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <INT0_Fptr>
 72e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <INT0_Fptr+0x1>
 732:	30 97       	sbiw	r30, 0x00	; 0
 734:	09 f0       	breq	.+2      	; 0x738 <__vector_1+0x30>
	{
		INT0_Fptr();
 736:	09 95       	icall
	}
}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_2>:
ISR(INT1_vect)
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 77c:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <INT1_Fptr>
 780:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <INT1_Fptr+0x1>
 784:	30 97       	sbiw	r30, 0x00	; 0
 786:	09 f0       	breq	.+2      	; 0x78a <__vector_2+0x30>
	{
		INT1_Fptr();
 788:	09 95       	icall
	}
}
 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	5f 91       	pop	r21
 79c:	4f 91       	pop	r20
 79e:	3f 91       	pop	r19
 7a0:	2f 91       	pop	r18
 7a2:	0f 90       	pop	r0
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	0f 90       	pop	r0
 7a8:	1f 90       	pop	r1
 7aa:	18 95       	reti

000007ac <__vector_3>:
ISR(INT2_vect)
{
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	4f 93       	push	r20
 7bc:	5f 93       	push	r21
 7be:	6f 93       	push	r22
 7c0:	7f 93       	push	r23
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	af 93       	push	r26
 7c8:	bf 93       	push	r27
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 7ce:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <INT2_Fptr>
 7d2:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <INT2_Fptr+0x1>
 7d6:	30 97       	sbiw	r30, 0x00	; 0
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_3+0x30>
	{
		INT2_Fptr();
 7da:	09 95       	icall
	}
}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <TIMER0_Init>:
	CLR_BIT(TIMSK,TOIE2);
}
/*Timer-2 Call Back functions*/
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
 7fe:	81 30       	cpi	r24, 0x01	; 1
 800:	69 f0       	breq	.+26     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 802:	28 f0       	brcs	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 804:	82 30       	cpi	r24, 0x02	; 2
 806:	89 f0       	breq	.+34     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 808:	83 30       	cpi	r24, 0x03	; 3
 80a:	b1 f0       	breq	.+44     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 80c:	08 95       	ret
 80e:	83 b7       	in	r24, 0x33	; 51
 810:	8f 7b       	andi	r24, 0xBF	; 191
 812:	83 bf       	out	0x33, r24	; 51
 814:	83 b7       	in	r24, 0x33	; 51
 816:	87 7f       	andi	r24, 0xF7	; 247
 818:	83 bf       	out	0x33, r24	; 51
 81a:	08 95       	ret
 81c:	83 b7       	in	r24, 0x33	; 51
 81e:	80 64       	ori	r24, 0x40	; 64
 820:	83 bf       	out	0x33, r24	; 51
 822:	83 b7       	in	r24, 0x33	; 51
 824:	87 7f       	andi	r24, 0xF7	; 247
 826:	83 bf       	out	0x33, r24	; 51
 828:	08 95       	ret
 82a:	83 b7       	in	r24, 0x33	; 51
 82c:	8f 7b       	andi	r24, 0xBF	; 191
 82e:	83 bf       	out	0x33, r24	; 51
 830:	83 b7       	in	r24, 0x33	; 51
 832:	88 60       	ori	r24, 0x08	; 8
 834:	83 bf       	out	0x33, r24	; 51
 836:	08 95       	ret
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	80 64       	ori	r24, 0x40	; 64
 83c:	83 bf       	out	0x33, r24	; 51
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	88 60       	ori	r24, 0x08	; 8
 842:	83 bf       	out	0x33, r24	; 51
 844:	08 95       	ret

00000846 <timer_start>:
 846:	88 30       	cpi	r24, 0x08	; 8
 848:	40 f4       	brcc	.+16     	; 0x85a <timer_start+0x14>
 84a:	93 b7       	in	r25, 0x33	; 51
 84c:	98 7f       	andi	r25, 0xF8	; 248
 84e:	93 bf       	out	0x33, r25	; 51
 850:	93 b7       	in	r25, 0x33	; 51
 852:	89 2b       	or	r24, r25
 854:	83 bf       	out	0x33, r24	; 51
 856:	84 e0       	ldi	r24, 0x04	; 4
 858:	08 95       	ret
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	08 95       	ret

0000085e <TIMER0_OV_SetCallBack>:
 85e:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <Timer0_OVF_Fptr+0x1>
 862:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <Timer0_OVF_Fptr>
 866:	08 95       	ret

00000868 <__vector_11>:
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
 88a:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Timer0_OVF_Fptr>
 88e:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Timer0_OVF_Fptr+0x1>
 892:	30 97       	sbiw	r30, 0x00	; 0
 894:	09 f0       	breq	.+2      	; 0x898 <__vector_11+0x30>
 896:	09 95       	icall
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	bf 91       	pop	r27
 89e:	af 91       	pop	r26
 8a0:	9f 91       	pop	r25
 8a2:	8f 91       	pop	r24
 8a4:	7f 91       	pop	r23
 8a6:	6f 91       	pop	r22
 8a8:	5f 91       	pop	r21
 8aa:	4f 91       	pop	r20
 8ac:	3f 91       	pop	r19
 8ae:	2f 91       	pop	r18
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <TIMER0_OV_InterruptEnable>:
 8ba:	89 b7       	in	r24, 0x39	; 57
 8bc:	81 60       	ori	r24, 0x01	; 1
 8be:	89 bf       	out	0x39, r24	; 57
 8c0:	08 95       	ret

000008c2 <__vector_9>:
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
 8e4:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Timer1_OVF_Fptr>
 8e8:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Timer1_OVF_Fptr+0x1>
 8ec:	30 97       	sbiw	r30, 0x00	; 0
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <__vector_9+0x30>
 8f0:	09 95       	icall
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <__vector_8>:
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	4f 93       	push	r20
 924:	5f 93       	push	r21
 926:	6f 93       	push	r22
 928:	7f 93       	push	r23
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	af 93       	push	r26
 930:	bf 93       	push	r27
 932:	ef 93       	push	r30
 934:	ff 93       	push	r31
 936:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Timer1_OCB_Fptr>
 93a:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Timer1_OCB_Fptr+0x1>
 93e:	30 97       	sbiw	r30, 0x00	; 0
 940:	09 f0       	breq	.+2      	; 0x944 <__vector_8+0x30>
 942:	09 95       	icall
 944:	ff 91       	pop	r31
 946:	ef 91       	pop	r30
 948:	bf 91       	pop	r27
 94a:	af 91       	pop	r26
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	7f 91       	pop	r23
 952:	6f 91       	pop	r22
 954:	5f 91       	pop	r21
 956:	4f 91       	pop	r20
 958:	3f 91       	pop	r19
 95a:	2f 91       	pop	r18
 95c:	0f 90       	pop	r0
 95e:	0f be       	out	0x3f, r0	; 63
 960:	0f 90       	pop	r0
 962:	1f 90       	pop	r1
 964:	18 95       	reti

00000966 <__vector_6>:
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	ef 93       	push	r30
 986:	ff 93       	push	r31
 988:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Timer1_ICU_Fptr>
 98c:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Timer1_ICU_Fptr+0x1>
 990:	30 97       	sbiw	r30, 0x00	; 0
 992:	09 f0       	breq	.+2      	; 0x996 <__vector_6+0x30>
 994:	09 95       	icall
 996:	ff 91       	pop	r31
 998:	ef 91       	pop	r30
 99a:	bf 91       	pop	r27
 99c:	af 91       	pop	r26
 99e:	9f 91       	pop	r25
 9a0:	8f 91       	pop	r24
 9a2:	7f 91       	pop	r23
 9a4:	6f 91       	pop	r22
 9a6:	5f 91       	pop	r21
 9a8:	4f 91       	pop	r20
 9aa:	3f 91       	pop	r19
 9ac:	2f 91       	pop	r18
 9ae:	0f 90       	pop	r0
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	0f 90       	pop	r0
 9b4:	1f 90       	pop	r1
 9b6:	18 95       	reti

000009b8 <__vector_5>:
}
/*Timer-2 ISR functions*/
ISR(TIMER2_OV_vect)
{
 9b8:	1f 92       	push	r1
 9ba:	0f 92       	push	r0
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	0f 92       	push	r0
 9c0:	11 24       	eor	r1, r1
 9c2:	2f 93       	push	r18
 9c4:	3f 93       	push	r19
 9c6:	4f 93       	push	r20
 9c8:	5f 93       	push	r21
 9ca:	6f 93       	push	r22
 9cc:	7f 93       	push	r23
 9ce:	8f 93       	push	r24
 9d0:	9f 93       	push	r25
 9d2:	af 93       	push	r26
 9d4:	bf 93       	push	r27
 9d6:	ef 93       	push	r30
 9d8:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 9da:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Timer2_OVF_Fptr>
 9de:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Timer2_OVF_Fptr+0x1>
 9e2:	30 97       	sbiw	r30, 0x00	; 0
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
 9e6:	09 95       	icall
	}
}
 9e8:	ff 91       	pop	r31
 9ea:	ef 91       	pop	r30
 9ec:	bf 91       	pop	r27
 9ee:	af 91       	pop	r26
 9f0:	9f 91       	pop	r25
 9f2:	8f 91       	pop	r24
 9f4:	7f 91       	pop	r23
 9f6:	6f 91       	pop	r22
 9f8:	5f 91       	pop	r21
 9fa:	4f 91       	pop	r20
 9fc:	3f 91       	pop	r19
 9fe:	2f 91       	pop	r18
 a00:	0f 90       	pop	r0
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	0f 90       	pop	r0
 a06:	1f 90       	pop	r1
 a08:	18 95       	reti

00000a0a <__udivmodsi4>:
 a0a:	a1 e2       	ldi	r26, 0x21	; 33
 a0c:	1a 2e       	mov	r1, r26
 a0e:	aa 1b       	sub	r26, r26
 a10:	bb 1b       	sub	r27, r27
 a12:	fd 01       	movw	r30, r26
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <__udivmodsi4_ep>

00000a16 <__udivmodsi4_loop>:
 a16:	aa 1f       	adc	r26, r26
 a18:	bb 1f       	adc	r27, r27
 a1a:	ee 1f       	adc	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	a2 17       	cp	r26, r18
 a20:	b3 07       	cpc	r27, r19
 a22:	e4 07       	cpc	r30, r20
 a24:	f5 07       	cpc	r31, r21
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__udivmodsi4_ep>
 a28:	a2 1b       	sub	r26, r18
 a2a:	b3 0b       	sbc	r27, r19
 a2c:	e4 0b       	sbc	r30, r20
 a2e:	f5 0b       	sbc	r31, r21

00000a30 <__udivmodsi4_ep>:
 a30:	66 1f       	adc	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	1a 94       	dec	r1
 a3a:	69 f7       	brne	.-38     	; 0xa16 <__udivmodsi4_loop>
 a3c:	60 95       	com	r22
 a3e:	70 95       	com	r23
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	9b 01       	movw	r18, r22
 a46:	ac 01       	movw	r20, r24
 a48:	bd 01       	movw	r22, r26
 a4a:	cf 01       	movw	r24, r30
 a4c:	08 95       	ret

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
