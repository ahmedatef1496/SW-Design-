
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000e58  00000eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800080  00800080  00000f0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003171  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001033  00000000  00000000  00004479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a5c  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a08  00000000  00000000  00006f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012f6  00000000  00000000  00007910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002667  00000000  00000000  00008c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000b26d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_1>
   8:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_2>
   c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_5>
  18:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_8>
  24:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  8a:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

#include "app.h"

void app_init ()
{
		DIO_Init_All();                        //initialize dio pins regarding the configuration (button included)
  92:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Init_All>
		LCD_Init();                           //initialize lcd as 4 bit mode
  96:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Init>
		GLOBALE_ENABLE();                    //Global interrupt Enable
  9a:	78 94       	sei
		EXI_Init();                  
  9c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <EXI_Init>
		EXI_Enable(EX_INT0);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <EXI_Enable>
		EXI_TriggerEdge(EX_INT0,RISING_EDGE);
  a6:	63 e0       	ldi	r22, 0x03	; 3
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 72 03 	call	0x6e4	; 0x6e4 <EXI_TriggerEdge>
		EXI_SetCallBack(EX_INT0,OS_disable);
  ae:	6a ea       	ldi	r22, 0xAA	; 170
  b0:	76 e0       	ldi	r23, 0x06	; 6
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 df 03 	call	0x7be	; 0x7be <EXI_SetCallBack>
  b8:	08 95       	ret

000000ba <Task3>:
}


void Task3(void)    //task to repeated each 300ms
{
	DIO_togglepin(PINB0);
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	0e 94 19 03 	call	0x632	; 0x632 <DIO_togglepin>
  c0:	08 95       	ret

000000c2 <Task5>:
}
void Task5(void)   //task to repeated each 500ms
{
	DIO_togglepin(PINB1);
  c2:	89 e0       	ldi	r24, 0x09	; 9
  c4:	0e 94 19 03 	call	0x632	; 0x632 <DIO_togglepin>
  c8:	08 95       	ret

000000ca <BUTTON_read>:

en_buttonError_t BUTTON_read(DIO_Pin_type button , DIO_PinVoltage_type *buttonState)
{
	en_buttonError_t  error = BUTTON_OK;
	
	if (button <32)
  ca:	80 32       	cpi	r24, 0x20	; 32
  cc:	20 f4       	brcc	.+8      	; 0xd6 <BUTTON_read+0xc>
	{
		DIO_readpin(button,buttonState);
  ce:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_readpin>
		error = BUTTON_OK;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
	}
	else
	{
		error = WRONG_BUTTON_PIN;
  d6:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return error;
} 
  d8:	08 95       	ret

000000da <WriteIns>:
	DIO_writepin(D4,READ_BIT(data,0));
	DIO_writepin(EN,HIGH);
	_delay_ms(1);
	DIO_writepin(EN,LOW);
	_delay_ms(1);
}
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
  e6:	6c 2f       	mov	r22, r28
  e8:	66 1f       	adc	r22, r22
  ea:	66 27       	eor	r22, r22
  ec:	66 1f       	adc	r22, r22
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
  f4:	c6 fb       	bst	r28, 6
  f6:	66 27       	eor	r22, r22
  f8:	60 f9       	bld	r22, 0
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 100:	c5 fb       	bst	r28, 5
 102:	66 27       	eor	r22, r22
 104:	60 f9       	bld	r22, 0
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 10c:	c4 fb       	bst	r28, 4
 10e:	66 27       	eor	r22, r22
 110:	60 f9       	bld	r22, 0
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <WriteIns+0x4a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <WriteIns+0x50>
 12a:	00 00       	nop
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <WriteIns+0x5e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <WriteIns+0x64>
 13e:	00 00       	nop
 140:	c3 fb       	bst	r28, 3
 142:	66 27       	eor	r22, r22
 144:	60 f9       	bld	r22, 0
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 14c:	c2 fb       	bst	r28, 2
 14e:	66 27       	eor	r22, r22
 150:	60 f9       	bld	r22, 0
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 158:	c1 fb       	bst	r28, 1
 15a:	66 27       	eor	r22, r22
 15c:	60 f9       	bld	r22, 0
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 164:	6c 2f       	mov	r22, r28
 166:	61 70       	andi	r22, 0x01	; 1
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <WriteIns+0xa0>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <WriteIns+0xa6>
 180:	00 00       	nop
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 18a:	8f e9       	ldi	r24, 0x9F	; 159
 18c:	9f e0       	ldi	r25, 0x0F	; 15
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <WriteIns+0xb4>
 192:	00 c0       	rjmp	.+0      	; 0x194 <WriteIns+0xba>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	80 e7       	ldi	r24, 0x70	; 112
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <LCD_Init+0x6>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0x10>
 1aa:	00 00       	nop


void LCD_Init(void)
{
	_delay_ms(50);
	WriteIns(0x02);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 6d 00 	call	0xda	; 0xda <WriteIns>
	WriteIns(0x28);//5*7 2 lines
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	0e 94 6d 00 	call	0xda	; 0xda <WriteIns>
	WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	0e 94 6d 00 	call	0xda	; 0xda <WriteIns>
	WriteIns(0x01);//clear screen
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 6d 00 	call	0xda	; 0xda <WriteIns>
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_Init+0x2e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_Init+0x34>
 1ce:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);// increment DDRAM address, no shift
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 6d 00 	call	0xda	; 0xda <WriteIns>
 1d6:	08 95       	ret

000001d8 <main>:

#include "app/app.h"


int main(void)
{  
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x6>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0x8>
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <main+0xa>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	
    app_init();
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    OS_Init();
 1ea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <OS_Init>
  	strOSConfigTask_t strOSConfigTask3 = {3, Task3};
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	8d e5       	ldi	r24, 0x5D	; 93
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9b 83       	std	Y+3, r25	; 0x03
 1f8:	8a 83       	std	Y+2, r24	; 0x02
  	strOSConfigTask_t strOSConfigTask5 = {5, Task5};
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	8c 83       	std	Y+4, r24	; 0x04
 1fe:	81 e6       	ldi	r24, 0x61	; 97
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9e 83       	std	Y+6, r25	; 0x06
 204:	8d 83       	std	Y+5, r24	; 0x05
    OS_CreateTask(3, &strOSConfigTask3);
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <OS_CreateTask>
 	OS_CreateTask(5, &strOSConfigTask5); 
 212:	be 01       	movw	r22, r28
 214:	6c 5f       	subi	r22, 0xFC	; 252
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <OS_CreateTask>
 	OS_Run();
 21e:	0e 94 56 06 	call	0xcac	; 0xcac <OS_Run>


}
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	26 96       	adiw	r28, 0x06	; 6
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
 238:	98 2f       	mov	r25, r24
 23a:	96 95       	lsr	r25
 23c:	96 95       	lsr	r25
 23e:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 240:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
 242:	61 30       	cpi	r22, 0x01	; 1
 244:	09 f4       	brne	.+2      	; 0x248 <DIO_initpin+0x10>
 246:	59 c0       	rjmp	.+178    	; 0x2fa <DIO_initpin+0xc2>
 248:	20 f0       	brcs	.+8      	; 0x252 <DIO_initpin+0x1a>
 24a:	62 30       	cpi	r22, 0x02	; 2
 24c:	09 f4       	brne	.+2      	; 0x250 <DIO_initpin+0x18>
 24e:	a9 c0       	rjmp	.+338    	; 0x3a2 <DIO_initpin+0x16a>
 250:	fc c0       	rjmp	.+504    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		  {
			  case OUTPUT:
			  switch(port)
 252:	91 30       	cpi	r25, 0x01	; 1
 254:	c9 f0       	breq	.+50     	; 0x288 <DIO_initpin+0x50>
 256:	28 f0       	brcs	.+10     	; 0x262 <DIO_initpin+0x2a>
 258:	92 30       	cpi	r25, 0x02	; 2
 25a:	49 f1       	breq	.+82     	; 0x2ae <DIO_initpin+0x76>
 25c:	93 30       	cpi	r25, 0x03	; 3
 25e:	d1 f1       	breq	.+116    	; 0x2d4 <DIO_initpin+0x9c>
 260:	f6 c0       	rjmp	.+492    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
 262:	4a b3       	in	r20, 0x1a	; 26
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_initpin+0x38>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_initpin+0x34>
 274:	cb 01       	movw	r24, r22
 276:	94 2f       	mov	r25, r20
 278:	98 2b       	or	r25, r24
 27a:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
 27c:	9b b3       	in	r25, 0x1b	; 27
 27e:	80 95       	com	r24
 280:	89 23       	and	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 284:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
 286:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
 288:	47 b3       	in	r20, 0x17	; 23
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_initpin+0x5e>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_initpin+0x5a>
 29a:	cb 01       	movw	r24, r22
 29c:	94 2f       	mov	r25, r20
 29e:	98 2b       	or	r25, r24
 2a0:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
 2a2:	98 b3       	in	r25, 0x18	; 24
 2a4:	80 95       	com	r24
 2a6:	89 23       	and	r24, r25
 2a8:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
 2ac:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
 2ae:	44 b3       	in	r20, 0x14	; 20
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	b9 01       	movw	r22, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_initpin+0x84>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_initpin+0x80>
 2c0:	cb 01       	movw	r24, r22
 2c2:	94 2f       	mov	r25, r20
 2c4:	98 2b       	or	r25, r24
 2c6:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
 2c8:	95 b3       	in	r25, 0x15	; 21
 2ca:	80 95       	com	r24
 2cc:	89 23       	and	r24, r25
 2ce:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
 2d2:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
 2d4:	41 b3       	in	r20, 0x11	; 17
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_initpin+0xaa>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_initpin+0xa6>
 2e6:	cb 01       	movw	r24, r22
 2e8:	94 2f       	mov	r25, r20
 2ea:	98 2b       	or	r25, r24
 2ec:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
 2ee:	92 b3       	in	r25, 0x12	; 18
 2f0:	80 95       	com	r24
 2f2:	89 23       	and	r24, r25
 2f4:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
 2f8:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
 2fa:	91 30       	cpi	r25, 0x01	; 1
 2fc:	c9 f0       	breq	.+50     	; 0x330 <DIO_initpin+0xf8>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <DIO_initpin+0xd2>
 300:	92 30       	cpi	r25, 0x02	; 2
 302:	49 f1       	breq	.+82     	; 0x356 <DIO_initpin+0x11e>
 304:	93 30       	cpi	r25, 0x03	; 3
 306:	d1 f1       	breq	.+116    	; 0x37c <DIO_initpin+0x144>
 308:	a4 c0       	rjmp	.+328    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
 30a:	4a b3       	in	r20, 0x1a	; 26
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	b9 01       	movw	r22, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_initpin+0xe0>
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	8a 95       	dec	r24
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_initpin+0xdc>
 31c:	cb 01       	movw	r24, r22
 31e:	80 95       	com	r24
 320:	94 2f       	mov	r25, r20
 322:	98 23       	and	r25, r24
 324:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
 326:	9b b3       	in	r25, 0x1b	; 27
 328:	89 23       	and	r24, r25
 32a:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 32c:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
 32e:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
 330:	47 b3       	in	r20, 0x17	; 23
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	b9 01       	movw	r22, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_initpin+0x106>
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	8a 95       	dec	r24
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_initpin+0x102>
 342:	cb 01       	movw	r24, r22
 344:	80 95       	com	r24
 346:	94 2f       	mov	r25, r20
 348:	98 23       	and	r25, r24
 34a:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
 34c:	98 b3       	in	r25, 0x18	; 24
 34e:	89 23       	and	r24, r25
 350:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 352:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
 354:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
 356:	44 b3       	in	r20, 0x14	; 20
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_initpin+0x12c>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_initpin+0x128>
 368:	cb 01       	movw	r24, r22
 36a:	80 95       	com	r24
 36c:	94 2f       	mov	r25, r20
 36e:	98 23       	and	r25, r24
 370:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
 372:	95 b3       	in	r25, 0x15	; 21
 374:	89 23       	and	r24, r25
 376:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 378:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
 37a:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
 37c:	41 b3       	in	r20, 0x11	; 17
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_initpin+0x152>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_initpin+0x14e>
 38e:	cb 01       	movw	r24, r22
 390:	80 95       	com	r24
 392:	94 2f       	mov	r25, r20
 394:	98 23       	and	r25, r24
 396:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
 398:	92 b3       	in	r25, 0x12	; 18
 39a:	89 23       	and	r24, r25
 39c:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 39e:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
 3a0:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
 3a2:	91 30       	cpi	r25, 0x01	; 1
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <DIO_initpin+0x1a0>
 3a6:	28 f0       	brcs	.+10     	; 0x3b2 <DIO_initpin+0x17a>
 3a8:	92 30       	cpi	r25, 0x02	; 2
 3aa:	49 f1       	breq	.+82     	; 0x3fe <DIO_initpin+0x1c6>
 3ac:	93 30       	cpi	r25, 0x03	; 3
 3ae:	d1 f1       	breq	.+116    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3b0:	52 c0       	rjmp	.+164    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
 3b2:	4a b3       	in	r20, 0x1a	; 26
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	b9 01       	movw	r22, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_initpin+0x188>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	8a 95       	dec	r24
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_initpin+0x184>
 3c4:	cb 01       	movw	r24, r22
 3c6:	96 2f       	mov	r25, r22
 3c8:	90 95       	com	r25
 3ca:	94 23       	and	r25, r20
 3cc:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
 3ce:	9b b3       	in	r25, 0x1b	; 27
 3d0:	89 2b       	or	r24, r25
 3d2:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
 3d6:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
 3d8:	47 b3       	in	r20, 0x17	; 23
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_initpin+0x1ae>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_initpin+0x1aa>
 3ea:	cb 01       	movw	r24, r22
 3ec:	96 2f       	mov	r25, r22
 3ee:	90 95       	com	r25
 3f0:	94 23       	and	r25, r20
 3f2:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
 3f4:	98 b3       	in	r25, 0x18	; 24
 3f6:	89 2b       	or	r24, r25
 3f8:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
 3fc:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
 3fe:	44 b3       	in	r20, 0x14	; 20
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	96 2f       	mov	r25, r22
 414:	90 95       	com	r25
 416:	94 23       	and	r25, r20
 418:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
 41a:	95 b3       	in	r25, 0x15	; 21
 41c:	89 2b       	or	r24, r25
 41e:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 420:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
 422:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
 424:	41 b3       	in	r20, 0x11	; 17
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	96 2f       	mov	r25, r22
 43a:	90 95       	com	r25
 43c:	94 23       	and	r25, r20
 43e:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
 440:	92 b3       	in	r25, 0x12	; 18
 442:	89 2b       	or	r24, r25
 444:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 446:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
 448:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 456:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
 458:	08 95       	ret

0000045a <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
 45a:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
 45c:	c0 e0       	ldi	r28, 0x00	; 0
 45e:	09 c0       	rjmp	.+18     	; 0x472 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
 460:	ec 2f       	mov	r30, r28
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	e0 5a       	subi	r30, 0xA0	; 160
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	60 81       	ld	r22, Z
 46a:	8c 2f       	mov	r24, r28
 46c:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
 470:	cf 5f       	subi	r28, 0xFF	; 255
 472:	c0 32       	cpi	r28, 0x20	; 32
 474:	a8 f3       	brcs	.-22     	; 0x460 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
 47a:	98 2f       	mov	r25, r24
 47c:	96 95       	lsr	r25
 47e:	96 95       	lsr	r25
 480:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 482:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
 484:	66 23       	and	r22, r22
 486:	09 f4       	brne	.+2      	; 0x48a <DIO_writepin+0x10>
 488:	43 c0       	rjmp	.+134    	; 0x510 <DIO_writepin+0x96>
 48a:	61 30       	cpi	r22, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <DIO_writepin+0x16>
 48e:	84 c0       	rjmp	.+264    	; 0x598 <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
 490:	91 30       	cpi	r25, 0x01	; 1
 492:	a1 f0       	breq	.+40     	; 0x4bc <DIO_writepin+0x42>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <DIO_writepin+0x26>
 496:	92 30       	cpi	r25, 0x02	; 2
 498:	f9 f0       	breq	.+62     	; 0x4d8 <DIO_writepin+0x5e>
 49a:	93 30       	cpi	r25, 0x03	; 3
 49c:	59 f1       	breq	.+86     	; 0x4f4 <DIO_writepin+0x7a>
 49e:	7e c0       	rjmp	.+252    	; 0x59c <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
 4a0:	4b b3       	in	r20, 0x1b	; 27
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_writepin+0x34>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_writepin+0x30>
 4b2:	cb 01       	movw	r24, r22
 4b4:	84 2b       	or	r24, r20
 4b6:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
 4ba:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
 4bc:	48 b3       	in	r20, 0x18	; 24
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_writepin+0x50>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_writepin+0x4c>
 4ce:	cb 01       	movw	r24, r22
 4d0:	84 2b       	or	r24, r20
 4d2:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
 4d6:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
 4d8:	45 b3       	in	r20, 0x15	; 21
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_writepin+0x6c>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_writepin+0x68>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
 4f2:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
 4f4:	42 b3       	in	r20, 0x12	; 18
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	b9 01       	movw	r22, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_writepin+0x88>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_writepin+0x84>
 506:	cb 01       	movw	r24, r22
 508:	84 2b       	or	r24, r20
 50a:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 50c:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
 50e:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
 510:	91 30       	cpi	r25, 0x01	; 1
 512:	a9 f0       	breq	.+42     	; 0x53e <DIO_writepin+0xc4>
 514:	28 f0       	brcs	.+10     	; 0x520 <DIO_writepin+0xa6>
 516:	92 30       	cpi	r25, 0x02	; 2
 518:	09 f1       	breq	.+66     	; 0x55c <DIO_writepin+0xe2>
 51a:	93 30       	cpi	r25, 0x03	; 3
 51c:	71 f1       	breq	.+92     	; 0x57a <DIO_writepin+0x100>
 51e:	40 c0       	rjmp	.+128    	; 0x5a0 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
 520:	4b b3       	in	r20, 0x1b	; 27
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	b9 01       	movw	r22, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_writepin+0xb4>
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_writepin+0xb0>
 532:	cb 01       	movw	r24, r22
 534:	80 95       	com	r24
 536:	84 23       	and	r24, r20
 538:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 53a:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
 53c:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
 53e:	48 b3       	in	r20, 0x18	; 24
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_writepin+0xd2>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_writepin+0xce>
 550:	cb 01       	movw	r24, r22
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 558:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
 55a:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
 55c:	45 b3       	in	r20, 0x15	; 21
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_writepin+0xf0>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_writepin+0xec>
 56e:	cb 01       	movw	r24, r22
 570:	80 95       	com	r24
 572:	84 23       	and	r24, r20
 574:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 576:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
 578:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
 57a:	42 b3       	in	r20, 0x12	; 18
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_writepin+0x10e>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	8a 95       	dec	r24
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_writepin+0x10a>
 58c:	cb 01       	movw	r24, r22
 58e:	80 95       	com	r24
 590:	84 23       	and	r24, r20
 592:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
 594:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
 596:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
 5a2:	08 95       	ret

000005a4 <DIO_readpin>:
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
 5a4:	98 2f       	mov	r25, r24
 5a6:	96 95       	lsr	r25
 5a8:	96 95       	lsr	r25
 5aa:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 5ac:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num < 8)
	  {

		  switch(port)
 5ae:	91 30       	cpi	r25, 0x01	; 1
 5b0:	a1 f0       	breq	.+40     	; 0x5da <DIO_readpin+0x36>
 5b2:	28 f0       	brcs	.+10     	; 0x5be <DIO_readpin+0x1a>
 5b4:	92 30       	cpi	r25, 0x02	; 2
 5b6:	f9 f0       	breq	.+62     	; 0x5f6 <DIO_readpin+0x52>
 5b8:	93 30       	cpi	r25, 0x03	; 3
 5ba:	59 f1       	breq	.+86     	; 0x612 <DIO_readpin+0x6e>
 5bc:	38 c0       	rjmp	.+112    	; 0x62e <DIO_readpin+0x8a>
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
 5be:	29 b3       	in	r18, 0x19	; 25
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	a9 01       	movw	r20, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_readpin+0x26>
 5c6:	55 95       	asr	r21
 5c8:	47 95       	ror	r20
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_readpin+0x22>
 5ce:	ca 01       	movw	r24, r20
 5d0:	81 70       	andi	r24, 0x01	; 1
 5d2:	fb 01       	movw	r30, r22
 5d4:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
		  switch(port)
		  {
			  case PA:

			  *volt=READ_BIT(PINA,pin_num);
			  break;
 5d8:	08 95       	ret
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
 5da:	26 b3       	in	r18, 0x16	; 22
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	a9 01       	movw	r20, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_readpin+0x42>
 5e2:	55 95       	asr	r21
 5e4:	47 95       	ror	r20
 5e6:	8a 95       	dec	r24
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_readpin+0x3e>
 5ea:	ca 01       	movw	r24, r20
 5ec:	81 70       	andi	r24, 0x01	; 1
 5ee:	fb 01       	movw	r30, r22
 5f0:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINA,pin_num);
			  break;
			  case PB:

			  *volt=READ_BIT(PINB,pin_num);
			  break;
 5f4:	08 95       	ret
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
 5f6:	23 b3       	in	r18, 0x13	; 19
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	a9 01       	movw	r20, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_readpin+0x5e>
 5fe:	55 95       	asr	r21
 600:	47 95       	ror	r20
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_readpin+0x5a>
 606:	ca 01       	movw	r24, r20
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	fb 01       	movw	r30, r22
 60c:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 60e:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINB,pin_num);
			  break;
			  case PC:

			  *volt=READ_BIT(PINC,pin_num);
			  break;
 610:	08 95       	ret
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
 612:	20 b3       	in	r18, 0x10	; 16
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	a9 01       	movw	r20, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_readpin+0x7a>
 61a:	55 95       	asr	r21
 61c:	47 95       	ror	r20
 61e:	8a 95       	dec	r24
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_readpin+0x76>
 622:	ca 01       	movw	r24, r20
 624:	81 70       	andi	r24, 0x01	; 1
 626:	fb 01       	movw	r30, r22
 628:	80 83       	st	Z, r24
  }
   en_dioError_t  DIO_readpin  (DIO_Pin_type pin,DIO_PinVoltage_type *volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 62a:	80 e0       	ldi	r24, 0x00	; 0
			  *volt=READ_BIT(PINC,pin_num);
			  break;
			  case PD:

			  *volt=READ_BIT(PIND,pin_num);
			  break;
 62c:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
 62e:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
 630:	08 95       	ret

00000632 <DIO_togglepin>:
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
 632:	98 2f       	mov	r25, r24
 634:	96 95       	lsr	r25
 636:	96 95       	lsr	r25
 638:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
 63a:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  if (pin_num< 8)
	  {
		  switch(port)
 63c:	91 30       	cpi	r25, 0x01	; 1
 63e:	a1 f0       	breq	.+40     	; 0x668 <DIO_togglepin+0x36>
 640:	28 f0       	brcs	.+10     	; 0x64c <DIO_togglepin+0x1a>
 642:	92 30       	cpi	r25, 0x02	; 2
 644:	f9 f0       	breq	.+62     	; 0x684 <DIO_togglepin+0x52>
 646:	93 30       	cpi	r25, 0x03	; 3
 648:	59 f1       	breq	.+86     	; 0x6a0 <DIO_togglepin+0x6e>
 64a:	38 c0       	rjmp	.+112    	; 0x6bc <DIO_togglepin+0x8a>
		  {
			  case PA:
			  TGL_BIT(PORTA,pin_num);
 64c:	4b b3       	in	r20, 0x1b	; 27
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	b9 01       	movw	r22, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_togglepin+0x28>
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_togglepin+0x24>
 65e:	cb 01       	movw	r24, r22
 660:	84 27       	eor	r24, r20
 662:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 664:	80 e0       	ldi	r24, 0x00	; 0
	  {
		  switch(port)
		  {
			  case PA:
			  TGL_BIT(PORTA,pin_num);
			  break;
 666:	08 95       	ret
			  case PB:
			  TGL_BIT(PORTB,pin_num);
 668:	48 b3       	in	r20, 0x18	; 24
 66a:	21 e0       	ldi	r18, 0x01	; 1
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	b9 01       	movw	r22, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_togglepin+0x44>
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	8a 95       	dec	r24
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_togglepin+0x40>
 67a:	cb 01       	movw	r24, r22
 67c:	84 27       	eor	r24, r20
 67e:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 680:	80 e0       	ldi	r24, 0x00	; 0
			  case PA:
			  TGL_BIT(PORTA,pin_num);
			  break;
			  case PB:
			  TGL_BIT(PORTB,pin_num);
			  break;
 682:	08 95       	ret
			  case PC:
			  TGL_BIT(PORTC,pin_num);
 684:	45 b3       	in	r20, 0x15	; 21
 686:	21 e0       	ldi	r18, 0x01	; 1
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	b9 01       	movw	r22, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_togglepin+0x60>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	8a 95       	dec	r24
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_togglepin+0x5c>
 696:	cb 01       	movw	r24, r22
 698:	84 27       	eor	r24, r20
 69a:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 69c:	80 e0       	ldi	r24, 0x00	; 0
			  case PB:
			  TGL_BIT(PORTB,pin_num);
			  break;
			  case PC:
			  TGL_BIT(PORTC,pin_num);
			  break;
 69e:	08 95       	ret
			  case PD:
			  TGL_BIT(PORTD,pin_num);
 6a0:	42 b3       	in	r20, 0x12	; 18
 6a2:	21 e0       	ldi	r18, 0x01	; 1
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	b9 01       	movw	r22, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_togglepin+0x7c>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_togglepin+0x78>
 6b2:	cb 01       	movw	r24, r22
 6b4:	84 27       	eor	r24, r20
 6b6:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_togglepin(DIO_Pin_type pin)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
			  case PC:
			  TGL_BIT(PORTC,pin_num);
			  break;
			  case PD:
			  TGL_BIT(PORTD,pin_num);
			  break;
 6ba:	08 95       	ret
			  default:
			  error = WRONG_PORT_NUMBER;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
	  else
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;
  }
 6be:	08 95       	ret

000006c0 <EXI_Enable>:
		break;
		case EX_INT1:
		CLR_BIT(GICR,INT1);
		break;
		case EX_INT2:
		CLR_BIT(GICR,INT2);
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	41 f0       	breq	.+16     	; 0x6d4 <EXI_Enable+0x14>
 6c4:	18 f0       	brcs	.+6      	; 0x6cc <EXI_Enable+0xc>
 6c6:	82 30       	cpi	r24, 0x02	; 2
 6c8:	49 f0       	breq	.+18     	; 0x6dc <EXI_Enable+0x1c>
 6ca:	08 95       	ret
 6cc:	8b b7       	in	r24, 0x3b	; 59
 6ce:	80 64       	ori	r24, 0x40	; 64
 6d0:	8b bf       	out	0x3b, r24	; 59
 6d2:	08 95       	ret
 6d4:	8b b7       	in	r24, 0x3b	; 59
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	8b bf       	out	0x3b, r24	; 59
 6da:	08 95       	ret
 6dc:	8b b7       	in	r24, 0x3b	; 59
 6de:	80 62       	ori	r24, 0x20	; 32
 6e0:	8b bf       	out	0x3b, r24	; 59
 6e2:	08 95       	ret

000006e4 <EXI_TriggerEdge>:


/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
	switch(Interrupt){
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	49 f1       	breq	.+82     	; 0x73a <EXI_TriggerEdge+0x56>
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <EXI_TriggerEdge+0xe>
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <EXI_TriggerEdge+0xc>
 6ee:	49 c0       	rjmp	.+146    	; 0x782 <EXI_TriggerEdge+0x9e>
 6f0:	08 95       	ret
		case EX_INT0:
		switch(Edge){
 6f2:	61 30       	cpi	r22, 0x01	; 1
 6f4:	69 f0       	breq	.+26     	; 0x710 <EXI_TriggerEdge+0x2c>
 6f6:	28 f0       	brcs	.+10     	; 0x702 <EXI_TriggerEdge+0x1e>
 6f8:	62 30       	cpi	r22, 0x02	; 2
 6fa:	89 f0       	breq	.+34     	; 0x71e <EXI_TriggerEdge+0x3a>
 6fc:	63 30       	cpi	r22, 0x03	; 3
 6fe:	b1 f0       	breq	.+44     	; 0x72c <EXI_TriggerEdge+0x48>
 700:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
 702:	85 b7       	in	r24, 0x35	; 53
 704:	8e 7f       	andi	r24, 0xFE	; 254
 706:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 708:	85 b7       	in	r24, 0x35	; 53
 70a:	8d 7f       	andi	r24, 0xFD	; 253
 70c:	85 bf       	out	0x35, r24	; 53
			break;
 70e:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
 710:	85 b7       	in	r24, 0x35	; 53
 712:	81 60       	ori	r24, 0x01	; 1
 714:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 716:	85 b7       	in	r24, 0x35	; 53
 718:	8d 7f       	andi	r24, 0xFD	; 253
 71a:	85 bf       	out	0x35, r24	; 53
			break;
 71c:	08 95       	ret
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
 71e:	85 b7       	in	r24, 0x35	; 53
 720:	8e 7f       	andi	r24, 0xFE	; 254
 722:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 724:	85 b7       	in	r24, 0x35	; 53
 726:	82 60       	ori	r24, 0x02	; 2
 728:	85 bf       	out	0x35, r24	; 53
			break;
 72a:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 72c:	85 b7       	in	r24, 0x35	; 53
 72e:	81 60       	ori	r24, 0x01	; 1
 730:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 732:	85 b7       	in	r24, 0x35	; 53
 734:	82 60       	ori	r24, 0x02	; 2
 736:	85 bf       	out	0x35, r24	; 53
			break;
 738:	08 95       	ret
			
		}
		break;
		case EX_INT1:
		switch(Edge){
 73a:	61 30       	cpi	r22, 0x01	; 1
 73c:	69 f0       	breq	.+26     	; 0x758 <EXI_TriggerEdge+0x74>
 73e:	28 f0       	brcs	.+10     	; 0x74a <EXI_TriggerEdge+0x66>
 740:	62 30       	cpi	r22, 0x02	; 2
 742:	89 f0       	breq	.+34     	; 0x766 <EXI_TriggerEdge+0x82>
 744:	63 30       	cpi	r22, 0x03	; 3
 746:	b1 f0       	breq	.+44     	; 0x774 <EXI_TriggerEdge+0x90>
 748:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
 74a:	85 b7       	in	r24, 0x35	; 53
 74c:	8b 7f       	andi	r24, 0xFB	; 251
 74e:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 750:	85 b7       	in	r24, 0x35	; 53
 752:	87 7f       	andi	r24, 0xF7	; 247
 754:	85 bf       	out	0x35, r24	; 53
			break;
 756:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
 758:	85 b7       	in	r24, 0x35	; 53
 75a:	84 60       	ori	r24, 0x04	; 4
 75c:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 75e:	85 b7       	in	r24, 0x35	; 53
 760:	87 7f       	andi	r24, 0xF7	; 247
 762:	85 bf       	out	0x35, r24	; 53
			break;
 764:	08 95       	ret
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
 766:	85 b7       	in	r24, 0x35	; 53
 768:	8b 7f       	andi	r24, 0xFB	; 251
 76a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 76c:	85 b7       	in	r24, 0x35	; 53
 76e:	88 60       	ori	r24, 0x08	; 8
 770:	85 bf       	out	0x35, r24	; 53
			break;
 772:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 774:	85 b7       	in	r24, 0x35	; 53
 776:	84 60       	ori	r24, 0x04	; 4
 778:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 77a:	85 b7       	in	r24, 0x35	; 53
 77c:	88 60       	ori	r24, 0x08	; 8
 77e:	85 bf       	out	0x35, r24	; 53
			break;
 780:	08 95       	ret
			
		}
		break;
		case EX_INT2:
		switch(Edge){
 782:	62 30       	cpi	r22, 0x02	; 2
 784:	19 f0       	breq	.+6      	; 0x78c <EXI_TriggerEdge+0xa8>
 786:	63 30       	cpi	r22, 0x03	; 3
 788:	29 f0       	breq	.+10     	; 0x794 <EXI_TriggerEdge+0xb0>
 78a:	08 c0       	rjmp	.+16     	; 0x79c <EXI_TriggerEdge+0xb8>
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
 78c:	84 b7       	in	r24, 0x34	; 52
 78e:	8f 7b       	andi	r24, 0xBF	; 191
 790:	84 bf       	out	0x34, r24	; 52
			break;
 792:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 794:	84 b7       	in	r24, 0x34	; 52
 796:	80 64       	ori	r24, 0x40	; 64
 798:	84 bf       	out	0x34, r24	; 52
			break;
 79a:	08 95       	ret
			default:
			CLR_BIT(MCUCSR,ISC2);
 79c:	84 b7       	in	r24, 0x34	; 52
 79e:	8f 7b       	andi	r24, 0xBF	; 191
 7a0:	84 bf       	out	0x34, r24	; 52
 7a2:	08 95       	ret

000007a4 <EXI_Init>:
	}
}

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
 7a4:	62 e0       	ldi	r22, 0x02	; 2
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
 7b4:	62 e0       	ldi	r22, 0x02	; 2
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <EXI_TriggerEdge>
 7bc:	08 95       	ret

000007be <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	
	
	switch(Interrupt){
 7be:	81 30       	cpi	r24, 0x01	; 1
 7c0:	49 f0       	breq	.+18     	; 0x7d4 <EXI_SetCallBack+0x16>
 7c2:	18 f0       	brcs	.+6      	; 0x7ca <EXI_SetCallBack+0xc>
 7c4:	82 30       	cpi	r24, 0x02	; 2
 7c6:	59 f0       	breq	.+22     	; 0x7de <EXI_SetCallBack+0x20>
 7c8:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 7ca:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <INT0_Fptr+0x1>
 7ce:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <INT0_Fptr>
		break;
 7d2:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 7d4:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <INT1_Fptr+0x1>
 7d8:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <INT1_Fptr>
		break;
 7dc:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 7de:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <__data_end+0x1>
 7e2:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <__data_end>
 7e6:	08 95       	ret

000007e8 <__vector_1>:




ISR(INT0_vect)
{  
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
 7f2:	2f 93       	push	r18
 7f4:	3f 93       	push	r19
 7f6:	4f 93       	push	r20
 7f8:	5f 93       	push	r21
 7fa:	6f 93       	push	r22
 7fc:	7f 93       	push	r23
 7fe:	8f 93       	push	r24
 800:	9f 93       	push	r25
 802:	af 93       	push	r26
 804:	bf 93       	push	r27
 806:	ef 93       	push	r30
 808:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 80a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <INT0_Fptr>
 80e:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <INT0_Fptr+0x1>
 812:	30 97       	sbiw	r30, 0x00	; 0
 814:	09 f0       	breq	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	{
		INT0_Fptr();
 816:	09 95       	icall
	}
}
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	bf 91       	pop	r27
 81e:	af 91       	pop	r26
 820:	9f 91       	pop	r25
 822:	8f 91       	pop	r24
 824:	7f 91       	pop	r23
 826:	6f 91       	pop	r22
 828:	5f 91       	pop	r21
 82a:	4f 91       	pop	r20
 82c:	3f 91       	pop	r19
 82e:	2f 91       	pop	r18
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	0f 90       	pop	r0
 836:	1f 90       	pop	r1
 838:	18 95       	reti

0000083a <__vector_2>:
ISR(INT1_vect)
{
 83a:	1f 92       	push	r1
 83c:	0f 92       	push	r0
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	0f 92       	push	r0
 842:	11 24       	eor	r1, r1
 844:	2f 93       	push	r18
 846:	3f 93       	push	r19
 848:	4f 93       	push	r20
 84a:	5f 93       	push	r21
 84c:	6f 93       	push	r22
 84e:	7f 93       	push	r23
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 85c:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <INT1_Fptr>
 860:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <INT1_Fptr+0x1>
 864:	30 97       	sbiw	r30, 0x00	; 0
 866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
	{
		INT1_Fptr();
 868:	09 95       	icall
	}
}
 86a:	ff 91       	pop	r31
 86c:	ef 91       	pop	r30
 86e:	bf 91       	pop	r27
 870:	af 91       	pop	r26
 872:	9f 91       	pop	r25
 874:	8f 91       	pop	r24
 876:	7f 91       	pop	r23
 878:	6f 91       	pop	r22
 87a:	5f 91       	pop	r21
 87c:	4f 91       	pop	r20
 87e:	3f 91       	pop	r19
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <__vector_3>:
ISR(INT2_vect)
{
 88c:	1f 92       	push	r1
 88e:	0f 92       	push	r0
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	0f 92       	push	r0
 894:	11 24       	eor	r1, r1
 896:	2f 93       	push	r18
 898:	3f 93       	push	r19
 89a:	4f 93       	push	r20
 89c:	5f 93       	push	r21
 89e:	6f 93       	push	r22
 8a0:	7f 93       	push	r23
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	af 93       	push	r26
 8a8:	bf 93       	push	r27
 8aa:	ef 93       	push	r30
 8ac:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 8ae:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 8b2:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 8b6:	30 97       	sbiw	r30, 0x00	; 0
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__vector_3+0x30>
	{
		INT2_Fptr();
 8ba:	09 95       	icall
	}
}
 8bc:	ff 91       	pop	r31
 8be:	ef 91       	pop	r30
 8c0:	bf 91       	pop	r27
 8c2:	af 91       	pop	r26
 8c4:	9f 91       	pop	r25
 8c6:	8f 91       	pop	r24
 8c8:	7f 91       	pop	r23
 8ca:	6f 91       	pop	r22
 8cc:	5f 91       	pop	r21
 8ce:	4f 91       	pop	r20
 8d0:	3f 91       	pop	r19
 8d2:	2f 91       	pop	r18
 8d4:	0f 90       	pop	r0
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	0f 90       	pop	r0
 8da:	1f 90       	pop	r1
 8dc:	18 95       	reti

000008de <TIMER0_Init>:
	CLR_BIT(TIMSK,TOIE2);
}
/*Timer-2 Call Back functions*/
void TIMER2_OV_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OVF_Fptr=LocalFptr;
 8de:	81 30       	cpi	r24, 0x01	; 1
 8e0:	69 f0       	breq	.+26     	; 0x8fc <TIMER0_Init+0x1e>
 8e2:	28 f0       	brcs	.+10     	; 0x8ee <TIMER0_Init+0x10>
 8e4:	82 30       	cpi	r24, 0x02	; 2
 8e6:	89 f0       	breq	.+34     	; 0x90a <TIMER0_Init+0x2c>
 8e8:	83 30       	cpi	r24, 0x03	; 3
 8ea:	b1 f0       	breq	.+44     	; 0x918 <TIMER0_Init+0x3a>
 8ec:	08 95       	ret
 8ee:	83 b7       	in	r24, 0x33	; 51
 8f0:	8f 7b       	andi	r24, 0xBF	; 191
 8f2:	83 bf       	out	0x33, r24	; 51
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	87 7f       	andi	r24, 0xF7	; 247
 8f8:	83 bf       	out	0x33, r24	; 51
 8fa:	08 95       	ret
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	80 64       	ori	r24, 0x40	; 64
 900:	83 bf       	out	0x33, r24	; 51
 902:	83 b7       	in	r24, 0x33	; 51
 904:	87 7f       	andi	r24, 0xF7	; 247
 906:	83 bf       	out	0x33, r24	; 51
 908:	08 95       	ret
 90a:	83 b7       	in	r24, 0x33	; 51
 90c:	8f 7b       	andi	r24, 0xBF	; 191
 90e:	83 bf       	out	0x33, r24	; 51
 910:	83 b7       	in	r24, 0x33	; 51
 912:	88 60       	ori	r24, 0x08	; 8
 914:	83 bf       	out	0x33, r24	; 51
 916:	08 95       	ret
 918:	83 b7       	in	r24, 0x33	; 51
 91a:	80 64       	ori	r24, 0x40	; 64
 91c:	83 bf       	out	0x33, r24	; 51
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	88 60       	ori	r24, 0x08	; 8
 922:	83 bf       	out	0x33, r24	; 51
 924:	08 95       	ret

00000926 <timer_start>:
 926:	88 30       	cpi	r24, 0x08	; 8
 928:	40 f4       	brcc	.+16     	; 0x93a <timer_start+0x14>
 92a:	93 b7       	in	r25, 0x33	; 51
 92c:	98 7f       	andi	r25, 0xF8	; 248
 92e:	93 bf       	out	0x33, r25	; 51
 930:	93 b7       	in	r25, 0x33	; 51
 932:	89 2b       	or	r24, r25
 934:	83 bf       	out	0x33, r24	; 51
 936:	84 e0       	ldi	r24, 0x04	; 4
 938:	08 95       	ret
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	08 95       	ret

0000093e <TIMER0_OV_SetCallBack>:
 93e:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Timer0_OVF_Fptr+0x1>
 942:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Timer0_OVF_Fptr>
 946:	08 95       	ret

00000948 <__vector_11>:
 948:	1f 92       	push	r1
 94a:	0f 92       	push	r0
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	0f 92       	push	r0
 950:	11 24       	eor	r1, r1
 952:	2f 93       	push	r18
 954:	3f 93       	push	r19
 956:	4f 93       	push	r20
 958:	5f 93       	push	r21
 95a:	6f 93       	push	r22
 95c:	7f 93       	push	r23
 95e:	8f 93       	push	r24
 960:	9f 93       	push	r25
 962:	af 93       	push	r26
 964:	bf 93       	push	r27
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31
 96a:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Timer0_OVF_Fptr>
 96e:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Timer0_OVF_Fptr+0x1>
 972:	30 97       	sbiw	r30, 0x00	; 0
 974:	09 f0       	breq	.+2      	; 0x978 <__vector_11+0x30>
 976:	09 95       	icall
 978:	ff 91       	pop	r31
 97a:	ef 91       	pop	r30
 97c:	bf 91       	pop	r27
 97e:	af 91       	pop	r26
 980:	9f 91       	pop	r25
 982:	8f 91       	pop	r24
 984:	7f 91       	pop	r23
 986:	6f 91       	pop	r22
 988:	5f 91       	pop	r21
 98a:	4f 91       	pop	r20
 98c:	3f 91       	pop	r19
 98e:	2f 91       	pop	r18
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <TIMER0_OV_InterruptEnable>:
 99a:	89 b7       	in	r24, 0x39	; 57
 99c:	81 60       	ori	r24, 0x01	; 1
 99e:	89 bf       	out	0x39, r24	; 57
 9a0:	08 95       	ret

000009a2 <__vector_9>:
 9a2:	1f 92       	push	r1
 9a4:	0f 92       	push	r0
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	0f 92       	push	r0
 9aa:	11 24       	eor	r1, r1
 9ac:	2f 93       	push	r18
 9ae:	3f 93       	push	r19
 9b0:	4f 93       	push	r20
 9b2:	5f 93       	push	r21
 9b4:	6f 93       	push	r22
 9b6:	7f 93       	push	r23
 9b8:	8f 93       	push	r24
 9ba:	9f 93       	push	r25
 9bc:	af 93       	push	r26
 9be:	bf 93       	push	r27
 9c0:	ef 93       	push	r30
 9c2:	ff 93       	push	r31
 9c4:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Timer1_OVF_Fptr>
 9c8:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Timer1_OVF_Fptr+0x1>
 9cc:	30 97       	sbiw	r30, 0x00	; 0
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <__vector_9+0x30>
 9d0:	09 95       	icall
 9d2:	ff 91       	pop	r31
 9d4:	ef 91       	pop	r30
 9d6:	bf 91       	pop	r27
 9d8:	af 91       	pop	r26
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	7f 91       	pop	r23
 9e0:	6f 91       	pop	r22
 9e2:	5f 91       	pop	r21
 9e4:	4f 91       	pop	r20
 9e6:	3f 91       	pop	r19
 9e8:	2f 91       	pop	r18
 9ea:	0f 90       	pop	r0
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	0f 90       	pop	r0
 9f0:	1f 90       	pop	r1
 9f2:	18 95       	reti

000009f4 <__vector_8>:
 9f4:	1f 92       	push	r1
 9f6:	0f 92       	push	r0
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	0f 92       	push	r0
 9fc:	11 24       	eor	r1, r1
 9fe:	2f 93       	push	r18
 a00:	3f 93       	push	r19
 a02:	4f 93       	push	r20
 a04:	5f 93       	push	r21
 a06:	6f 93       	push	r22
 a08:	7f 93       	push	r23
 a0a:	8f 93       	push	r24
 a0c:	9f 93       	push	r25
 a0e:	af 93       	push	r26
 a10:	bf 93       	push	r27
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
 a16:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Timer1_OCB_Fptr>
 a1a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Timer1_OCB_Fptr+0x1>
 a1e:	30 97       	sbiw	r30, 0x00	; 0
 a20:	09 f0       	breq	.+2      	; 0xa24 <__vector_8+0x30>
 a22:	09 95       	icall
 a24:	ff 91       	pop	r31
 a26:	ef 91       	pop	r30
 a28:	bf 91       	pop	r27
 a2a:	af 91       	pop	r26
 a2c:	9f 91       	pop	r25
 a2e:	8f 91       	pop	r24
 a30:	7f 91       	pop	r23
 a32:	6f 91       	pop	r22
 a34:	5f 91       	pop	r21
 a36:	4f 91       	pop	r20
 a38:	3f 91       	pop	r19
 a3a:	2f 91       	pop	r18
 a3c:	0f 90       	pop	r0
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	0f 90       	pop	r0
 a42:	1f 90       	pop	r1
 a44:	18 95       	reti

00000a46 <__vector_6>:
 a46:	1f 92       	push	r1
 a48:	0f 92       	push	r0
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	0f 92       	push	r0
 a4e:	11 24       	eor	r1, r1
 a50:	2f 93       	push	r18
 a52:	3f 93       	push	r19
 a54:	4f 93       	push	r20
 a56:	5f 93       	push	r21
 a58:	6f 93       	push	r22
 a5a:	7f 93       	push	r23
 a5c:	8f 93       	push	r24
 a5e:	9f 93       	push	r25
 a60:	af 93       	push	r26
 a62:	bf 93       	push	r27
 a64:	ef 93       	push	r30
 a66:	ff 93       	push	r31
 a68:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Timer1_ICU_Fptr>
 a6c:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Timer1_ICU_Fptr+0x1>
 a70:	30 97       	sbiw	r30, 0x00	; 0
 a72:	09 f0       	breq	.+2      	; 0xa76 <__vector_6+0x30>
 a74:	09 95       	icall
 a76:	ff 91       	pop	r31
 a78:	ef 91       	pop	r30
 a7a:	bf 91       	pop	r27
 a7c:	af 91       	pop	r26
 a7e:	9f 91       	pop	r25
 a80:	8f 91       	pop	r24
 a82:	7f 91       	pop	r23
 a84:	6f 91       	pop	r22
 a86:	5f 91       	pop	r21
 a88:	4f 91       	pop	r20
 a8a:	3f 91       	pop	r19
 a8c:	2f 91       	pop	r18
 a8e:	0f 90       	pop	r0
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	0f 90       	pop	r0
 a94:	1f 90       	pop	r1
 a96:	18 95       	reti

00000a98 <__vector_5>:
}
/*Timer-2 ISR functions*/
ISR(TIMER2_OV_vect)
{
 a98:	1f 92       	push	r1
 a9a:	0f 92       	push	r0
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	0f 92       	push	r0
 aa0:	11 24       	eor	r1, r1
 aa2:	2f 93       	push	r18
 aa4:	3f 93       	push	r19
 aa6:	4f 93       	push	r20
 aa8:	5f 93       	push	r21
 aaa:	6f 93       	push	r22
 aac:	7f 93       	push	r23
 aae:	8f 93       	push	r24
 ab0:	9f 93       	push	r25
 ab2:	af 93       	push	r26
 ab4:	bf 93       	push	r27
 ab6:	ef 93       	push	r30
 ab8:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 aba:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Timer2_OVF_Fptr>
 abe:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Timer2_OVF_Fptr+0x1>
 ac2:	30 97       	sbiw	r30, 0x00	; 0
 ac4:	09 f0       	breq	.+2      	; 0xac8 <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
 ac6:	09 95       	icall
	}
}
 ac8:	ff 91       	pop	r31
 aca:	ef 91       	pop	r30
 acc:	bf 91       	pop	r27
 ace:	af 91       	pop	r26
 ad0:	9f 91       	pop	r25
 ad2:	8f 91       	pop	r24
 ad4:	7f 91       	pop	r23
 ad6:	6f 91       	pop	r22
 ad8:	5f 91       	pop	r21
 ada:	4f 91       	pop	r20
 adc:	3f 91       	pop	r19
 ade:	2f 91       	pop	r18
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <OS_IsPriorityEmpty>:
	}
	else
	{
		return OS_ERROR;
	}
}
 aea:	fc 01       	movw	r30, r24
 aec:	20 81       	ld	r18, Z
 aee:	21 11       	cpse	r18, r1
 af0:	06 c0       	rjmp	.+12     	; 0xafe <OS_IsPriorityEmpty+0x14>
 af2:	81 81       	ldd	r24, Z+1	; 0x01
 af4:	92 81       	ldd	r25, Z+2	; 0x02
 af6:	89 2b       	or	r24, r25
 af8:	21 f0       	breq	.+8      	; 0xb02 <OS_IsPriorityEmpty+0x18>
 afa:	83 e0       	ldi	r24, 0x03	; 3
 afc:	08 95       	ret
 afe:	83 e0       	ldi	r24, 0x03	; 3
 b00:	08 95       	ret
 b02:	82 e0       	ldi	r24, 0x02	; 2
 b04:	08 95       	ret

00000b06 <OS_TimerCallback>:
 b06:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <gu64TickCounts>
 b0a:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <gu64TickCounts+0x1>
 b0e:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <gu64TickCounts+0x2>
 b12:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <gu64TickCounts+0x3>
 b16:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <gu64TickCounts+0x4>
 b1a:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <gu64TickCounts+0x5>
 b1e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <gu64TickCounts+0x6>
 b22:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <gu64TickCounts+0x7>
 b26:	a1 e0       	ldi	r26, 0x01	; 1
 b28:	0e 94 12 07 	call	0xe24	; 0xe24 <__adddi3_s8>
 b2c:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <gu64TickCounts>
 b30:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <gu64TickCounts+0x1>
 b34:	40 93 9e 00 	sts	0x009E, r20	; 0x80009e <gu64TickCounts+0x2>
 b38:	50 93 9f 00 	sts	0x009F, r21	; 0x80009f <gu64TickCounts+0x3>
 b3c:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <gu64TickCounts+0x4>
 b40:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <gu64TickCounts+0x5>
 b44:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <gu64TickCounts+0x6>
 b48:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <gu64TickCounts+0x7>
 b4c:	a4 e6       	ldi	r26, 0x64	; 100
 b4e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__cmpdi2_s8>
 b52:	b1 f5       	brne	.+108    	; 0xbc0 <OS_TimerCallback+0xba>
 b54:	81 e0       	ldi	r24, 0x01	; 1
 b56:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <gu8TFlag>
 b5a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <gu64TaskCounter>
 b5e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <gu64TaskCounter+0x1>
 b62:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <gu64TaskCounter+0x2>
 b66:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <gu64TaskCounter+0x3>
 b6a:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu64TaskCounter+0x4>
 b6e:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <gu64TaskCounter+0x5>
 b72:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <gu64TaskCounter+0x6>
 b76:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <gu64TaskCounter+0x7>
 b7a:	a1 e0       	ldi	r26, 0x01	; 1
 b7c:	0e 94 12 07 	call	0xe24	; 0xe24 <__adddi3_s8>
 b80:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <gu64TaskCounter>
 b84:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <gu64TaskCounter+0x1>
 b88:	40 93 96 00 	sts	0x0096, r20	; 0x800096 <gu64TaskCounter+0x2>
 b8c:	50 93 97 00 	sts	0x0097, r21	; 0x800097 <gu64TaskCounter+0x3>
 b90:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <gu64TaskCounter+0x4>
 b94:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <gu64TaskCounter+0x5>
 b98:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <gu64TaskCounter+0x6>
 b9c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <gu64TaskCounter+0x7>
 ba0:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <gu64TickCounts>
 ba4:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gu64TickCounts+0x1>
 ba8:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <gu64TickCounts+0x2>
 bac:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <gu64TickCounts+0x3>
 bb0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <gu64TickCounts+0x4>
 bb4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <gu64TickCounts+0x5>
 bb8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <gu64TickCounts+0x6>
 bbc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <gu64TickCounts+0x7>
 bc0:	08 95       	ret

00000bc2 <OS_Init>:
 bc2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <gu8init_flag>
 bc6:	81 11       	cpse	r24, r1
 bc8:	11 c0       	rjmp	.+34     	; 0xbec <OS_Init+0x2a>
 bca:	8f 5f       	subi	r24, 0xFF	; 255
 bcc:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <gu8init_flag>
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	0e 94 6f 04 	call	0x8de	; 0x8de <TIMER0_Init>
 bd6:	0e 94 cd 04 	call	0x99a	; 0x99a <TIMER0_OV_InterruptEnable>
 bda:	83 e8       	ldi	r24, 0x83	; 131
 bdc:	95 e0       	ldi	r25, 0x05	; 5
 bde:	0e 94 9f 04 	call	0x93e	; 0x93e <TIMER0_OV_SetCallBack>
 be2:	83 e0       	ldi	r24, 0x03	; 3
 be4:	0e 94 93 04 	call	0x926	; 0x926 <timer_start>
 be8:	84 e0       	ldi	r24, 0x04	; 4
 bea:	08 95       	ret
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	08 95       	ret

00000bf0 <OS_CreateTask>:
 bf0:	ff 92       	push	r15
 bf2:	0f 93       	push	r16
 bf4:	1f 93       	push	r17
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	f8 2e       	mov	r15, r24
 bfc:	8b 01       	movw	r16, r22
 bfe:	c8 2f       	mov	r28, r24
 c00:	d0 e0       	ldi	r29, 0x00	; 0
 c02:	ce 01       	movw	r24, r28
 c04:	88 0f       	add	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	8c 0f       	add	r24, r28
 c0a:	9d 1f       	adc	r25, r29
 c0c:	8c 55       	subi	r24, 0x5C	; 92
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	0e 94 75 05 	call	0xaea	; 0xaea <OS_IsPriorityEmpty>
 c14:	82 30       	cpi	r24, 0x02	; 2
 c16:	b1 f4       	brne	.+44     	; 0xc44 <OS_CreateTask+0x54>
 c18:	89 e0       	ldi	r24, 0x09	; 9
 c1a:	8f 15       	cp	r24, r15
 c1c:	a8 f0       	brcs	.+42     	; 0xc48 <OS_CreateTask+0x58>
 c1e:	01 15       	cp	r16, r1
 c20:	11 05       	cpc	r17, r1
 c22:	a1 f0       	breq	.+40     	; 0xc4c <OS_CreateTask+0x5c>
 c24:	ce 01       	movw	r24, r28
 c26:	88 0f       	add	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	c8 0f       	add	r28, r24
 c2c:	d9 1f       	adc	r29, r25
 c2e:	cc 55       	subi	r28, 0x5C	; 92
 c30:	df 4f       	sbci	r29, 0xFF	; 255
 c32:	f8 01       	movw	r30, r16
 c34:	80 81       	ld	r24, Z
 c36:	91 81       	ldd	r25, Z+1	; 0x01
 c38:	a2 81       	ldd	r26, Z+2	; 0x02
 c3a:	88 83       	st	Y, r24
 c3c:	99 83       	std	Y+1, r25	; 0x01
 c3e:	aa 83       	std	Y+2, r26	; 0x02
 c40:	85 e0       	ldi	r24, 0x05	; 5
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <OS_CreateTask+0x5e>
 c44:	81 e0       	ldi	r24, 0x01	; 1
 c46:	03 c0       	rjmp	.+6      	; 0xc4e <OS_CreateTask+0x5e>
 c48:	81 e0       	ldi	r24, 0x01	; 1
 c4a:	01 c0       	rjmp	.+2      	; 0xc4e <OS_CreateTask+0x5e>
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	df 91       	pop	r29
 c50:	cf 91       	pop	r28
 c52:	1f 91       	pop	r17
 c54:	0f 91       	pop	r16
 c56:	ff 90       	pop	r15
 c58:	08 95       	ret

00000c5a <OS_Start_Check>:

 void OS_Start_Check ()
 { 
 c5a:	cf 93       	push	r28
 c5c:	df 93       	push	r29
 c5e:	1f 92       	push	r1
 c60:	cd b7       	in	r28, 0x3d	; 61
 c62:	de b7       	in	r29, 0x3e	; 62
	  u8 states;
	 BUTTON_read(button0,&states);
 c64:	be 01       	movw	r22, r28
 c66:	6f 5f       	subi	r22, 0xFF	; 255
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	88 e1       	ldi	r24, 0x18	; 24
 c6c:	0e 94 65 00 	call	0xca	; 0xca <BUTTON_read>
	 if (states==LOW)
 c70:	89 81       	ldd	r24, Y+1	; 0x01
 c72:	81 11       	cpse	r24, r1
 c74:	17 c0       	rjmp	.+46     	; 0xca4 <OS_Start_Check+0x4a>
	 {
		 DIO_writepin(PINB2,HIGH);
 c76:	61 e0       	ldi	r22, 0x01	; 1
 c78:	8a e0       	ldi	r24, 0x0A	; 10
 c7a:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
		 gu8os_flag=1;
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <gu8os_flag+0x1>
 c86:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <gu8os_flag>
		 
		 while(gu8os_flag==LOW)
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <OS_Start_Check+0x3e>
		 {
			 BUTTON_read(button0,&states);
 c8c:	be 01       	movw	r22, r28
 c8e:	6f 5f       	subi	r22, 0xFF	; 255
 c90:	7f 4f       	sbci	r23, 0xFF	; 255
 c92:	88 e1       	ldi	r24, 0x18	; 24
 c94:	0e 94 65 00 	call	0xca	; 0xca <BUTTON_read>
	 if (states==LOW)
	 {
		 DIO_writepin(PINB2,HIGH);
		 gu8os_flag=1;
		 
		 while(gu8os_flag==LOW)
 c98:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu8os_flag>
 c9c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu8os_flag+0x1>
 ca0:	89 2b       	or	r24, r25
 ca2:	a1 f3       	breq	.-24     	; 0xc8c <OS_Start_Check+0x32>
		 {
			 BUTTON_read(button0,&states);
		 }
	 }
 }
 ca4:	0f 90       	pop	r0
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	08 95       	ret

00000cac <OS_Run>:
	u8 u8TaskP;
	
	while(1)
	{   
         /* Checking if start flag is raised */
		 OS_Start_Check ();
 cac:	0e 94 2d 06 	call	0xc5a	; 0xc5a <OS_Start_Check>
		/* Checking if the ISR flag is raised */
		if(gu8TFlag == HIGH&&gu8os_flag==HIGH)  //100ms
 cb0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <gu8TFlag>
 cb4:	81 30       	cpi	r24, 0x01	; 1
 cb6:	d1 f7       	brne	.-12     	; 0xcac <OS_Run>
 cb8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gu8os_flag>
 cbc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <gu8os_flag+0x1>
 cc0:	01 97       	sbiw	r24, 0x01	; 1
 cc2:	a1 f7       	brne	.-24     	; 0xcac <OS_Run>
 cc4:	3e c0       	rjmp	.+124    	; 0xd42 <OS_Run+0x96>
			{    
				
				
				/* Checking if the selected task struct is not empty and the task's periodicity has come */
				if(
				(OS_IsPriorityEmpty(&gastrOSConfigTasks[u8TaskP]) != PRIORITY_EMPTY)
 cc6:	c9 2d       	mov	r28, r9
 cc8:	d0 e0       	ldi	r29, 0x00	; 0
 cca:	ce 01       	movw	r24, r28
 ccc:	88 0f       	add	r24, r24
 cce:	99 1f       	adc	r25, r25
 cd0:	8c 0f       	add	r24, r28
 cd2:	9d 1f       	adc	r25, r29
 cd4:	8c 55       	subi	r24, 0x5C	; 92
 cd6:	9f 4f       	sbci	r25, 0xFF	; 255
 cd8:	0e 94 75 05 	call	0xaea	; 0xaea <OS_IsPriorityEmpty>
			for(u8TaskP = 1; u8TaskP <= NO_OF_TASKS; u8TaskP++)
			{    
				
				
				/* Checking if the selected task struct is not empty and the task's periodicity has come */
				if(
 cdc:	82 30       	cpi	r24, 0x02	; 2
 cde:	79 f1       	breq	.+94     	; 0xd3e <OS_Run+0x92>
				(OS_IsPriorityEmpty(&gastrOSConfigTasks[u8TaskP]) != PRIORITY_EMPTY)
				 &&
				((gu64TaskCounter % (gastrOSConfigTasks[u8TaskP].u8Periodicity) ) == 0)
 ce0:	fe 01       	movw	r30, r28
 ce2:	ee 0f       	add	r30, r30
 ce4:	ff 1f       	adc	r31, r31
 ce6:	ec 0f       	add	r30, r28
 ce8:	fd 1f       	adc	r31, r29
 cea:	ec 55       	subi	r30, 0x5C	; 92
 cec:	ff 4f       	sbci	r31, 0xFF	; 255
 cee:	a0 80       	ld	r10, Z
 cf0:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <gu64TaskCounter>
 cf4:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <gu64TaskCounter+0x1>
 cf8:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <gu64TaskCounter+0x2>
 cfc:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <gu64TaskCounter+0x3>
 d00:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu64TaskCounter+0x4>
 d04:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <gu64TaskCounter+0x5>
 d08:	b1 2c       	mov	r11, r1
 d0a:	c1 2c       	mov	r12, r1
 d0c:	d1 2c       	mov	r13, r1
 d0e:	e1 2c       	mov	r14, r1
 d10:	f1 2c       	mov	r15, r1
 d12:	00 e0       	ldi	r16, 0x00	; 0
 d14:	10 e0       	ldi	r17, 0x00	; 0
 d16:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <gu64TaskCounter+0x6>
 d1a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <gu64TaskCounter+0x7>
 d1e:	0e 94 b3 06 	call	0xd66	; 0xd66 <__umoddi3>
				
				
				/* Checking if the selected task struct is not empty and the task's periodicity has come */
				if(
				(OS_IsPriorityEmpty(&gastrOSConfigTasks[u8TaskP]) != PRIORITY_EMPTY)
				 &&
 d22:	a0 e0       	ldi	r26, 0x00	; 0
 d24:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__cmpdi2_s8>
 d28:	51 f4       	brne	.+20     	; 0xd3e <OS_Run+0x92>
				((gu64TaskCounter % (gastrOSConfigTasks[u8TaskP].u8Periodicity) ) == 0)
				)
				{
					/* Calling the task's function */
					gastrOSConfigTasks[u8TaskP].pfTask();
 d2a:	ce 01       	movw	r24, r28
 d2c:	88 0f       	add	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	c8 0f       	add	r28, r24
 d32:	d9 1f       	adc	r29, r25
 d34:	cc 55       	subi	r28, 0x5C	; 92
 d36:	df 4f       	sbci	r29, 0xFF	; 255
 d38:	e9 81       	ldd	r30, Y+1	; 0x01
 d3a:	fa 81       	ldd	r31, Y+2	; 0x02
 d3c:	09 95       	icall
		 OS_Start_Check ();
		/* Checking if the ISR flag is raised */
		if(gu8TFlag == HIGH&&gu8os_flag==HIGH)  //100ms
		{
			/* Looping on each task to implement them based on priority */
			for(u8TaskP = 1; u8TaskP <= NO_OF_TASKS; u8TaskP++)
 d3e:	93 94       	inc	r9
 d40:	02 c0       	rjmp	.+4      	; 0xd46 <OS_Run+0x9a>
 d42:	99 24       	eor	r9, r9
 d44:	93 94       	inc	r9
 d46:	8a e0       	ldi	r24, 0x0A	; 10
 d48:	89 15       	cp	r24, r9
 d4a:	08 f0       	brcs	.+2      	; 0xd4e <OS_Run+0xa2>
 d4c:	bc cf       	rjmp	.-136    	; 0xcc6 <OS_Run+0x1a>
					
				}
		
			}
			/* Lowering the ISR flag to detect the next tick time */
			gu8TFlag  = LOW;
 d4e:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <gu8TFlag>
 d52:	ac cf       	rjmp	.-168    	; 0xcac <OS_Run>

00000d54 <OS_disable>:
	 }
 }
 
void OS_disable()
 {
	 gu8os_flag=0;
 d54:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <gu8os_flag+0x1>
 d58:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <gu8os_flag>
	 DIO_writepin(PINB2,LOW);
 d5c:	60 e0       	ldi	r22, 0x00	; 0
 d5e:	8a e0       	ldi	r24, 0x0A	; 10
 d60:	0e 94 3d 02 	call	0x47a	; 0x47a <DIO_writepin>
 d64:	08 95       	ret

00000d66 <__umoddi3>:
 d66:	68 94       	set
 d68:	01 c0       	rjmp	.+2      	; 0xd6c <__udivdi3_umoddi3>

00000d6a <__udivdi3>:
 d6a:	e8 94       	clt

00000d6c <__udivdi3_umoddi3>:
 d6c:	8f 92       	push	r8
 d6e:	9f 92       	push	r9
 d70:	cf 93       	push	r28
 d72:	df 93       	push	r29
 d74:	0e 94 c1 06 	call	0xd82	; 0xd82 <__udivmod64>
 d78:	df 91       	pop	r29
 d7a:	cf 91       	pop	r28
 d7c:	9f 90       	pop	r9
 d7e:	8f 90       	pop	r8
 d80:	08 95       	ret

00000d82 <__udivmod64>:
 d82:	88 24       	eor	r8, r8
 d84:	99 24       	eor	r9, r9
 d86:	f4 01       	movw	r30, r8
 d88:	e4 01       	movw	r28, r8
 d8a:	b0 e4       	ldi	r27, 0x40	; 64
 d8c:	9f 93       	push	r25
 d8e:	aa 27       	eor	r26, r26
 d90:	9a 15       	cp	r25, r10
 d92:	8b 04       	cpc	r8, r11
 d94:	9c 04       	cpc	r9, r12
 d96:	ed 05       	cpc	r30, r13
 d98:	fe 05       	cpc	r31, r14
 d9a:	cf 05       	cpc	r28, r15
 d9c:	d0 07       	cpc	r29, r16
 d9e:	a1 07       	cpc	r26, r17
 da0:	98 f4       	brcc	.+38     	; 0xdc8 <__udivmod64+0x46>
 da2:	ad 2f       	mov	r26, r29
 da4:	dc 2f       	mov	r29, r28
 da6:	cf 2f       	mov	r28, r31
 da8:	fe 2f       	mov	r31, r30
 daa:	e9 2d       	mov	r30, r9
 dac:	98 2c       	mov	r9, r8
 dae:	89 2e       	mov	r8, r25
 db0:	98 2f       	mov	r25, r24
 db2:	87 2f       	mov	r24, r23
 db4:	76 2f       	mov	r23, r22
 db6:	65 2f       	mov	r22, r21
 db8:	54 2f       	mov	r21, r20
 dba:	43 2f       	mov	r20, r19
 dbc:	32 2f       	mov	r19, r18
 dbe:	22 27       	eor	r18, r18
 dc0:	b8 50       	subi	r27, 0x08	; 8
 dc2:	31 f7       	brne	.-52     	; 0xd90 <__udivmod64+0xe>
 dc4:	bf 91       	pop	r27
 dc6:	27 c0       	rjmp	.+78     	; 0xe16 <__udivmod64+0x94>
 dc8:	1b 2e       	mov	r1, r27
 dca:	bf 91       	pop	r27
 dcc:	bb 27       	eor	r27, r27
 dce:	22 0f       	add	r18, r18
 dd0:	33 1f       	adc	r19, r19
 dd2:	44 1f       	adc	r20, r20
 dd4:	55 1f       	adc	r21, r21
 dd6:	66 1f       	adc	r22, r22
 dd8:	77 1f       	adc	r23, r23
 dda:	88 1f       	adc	r24, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	88 1c       	adc	r8, r8
 de0:	99 1c       	adc	r9, r9
 de2:	ee 1f       	adc	r30, r30
 de4:	ff 1f       	adc	r31, r31
 de6:	cc 1f       	adc	r28, r28
 de8:	dd 1f       	adc	r29, r29
 dea:	aa 1f       	adc	r26, r26
 dec:	bb 1f       	adc	r27, r27
 dee:	8a 14       	cp	r8, r10
 df0:	9b 04       	cpc	r9, r11
 df2:	ec 05       	cpc	r30, r12
 df4:	fd 05       	cpc	r31, r13
 df6:	ce 05       	cpc	r28, r14
 df8:	df 05       	cpc	r29, r15
 dfa:	a0 07       	cpc	r26, r16
 dfc:	b1 07       	cpc	r27, r17
 dfe:	48 f0       	brcs	.+18     	; 0xe12 <__udivmod64+0x90>
 e00:	8a 18       	sub	r8, r10
 e02:	9b 08       	sbc	r9, r11
 e04:	ec 09       	sbc	r30, r12
 e06:	fd 09       	sbc	r31, r13
 e08:	ce 09       	sbc	r28, r14
 e0a:	df 09       	sbc	r29, r15
 e0c:	a0 0b       	sbc	r26, r16
 e0e:	b1 0b       	sbc	r27, r17
 e10:	21 60       	ori	r18, 0x01	; 1
 e12:	1a 94       	dec	r1
 e14:	e1 f6       	brne	.-72     	; 0xdce <__udivmod64+0x4c>
 e16:	2e f4       	brtc	.+10     	; 0xe22 <__udivmod64+0xa0>
 e18:	94 01       	movw	r18, r8
 e1a:	af 01       	movw	r20, r30
 e1c:	be 01       	movw	r22, r28
 e1e:	cd 01       	movw	r24, r26
 e20:	00 0c       	add	r0, r0
 e22:	08 95       	ret

00000e24 <__adddi3_s8>:
 e24:	00 24       	eor	r0, r0
 e26:	a7 fd       	sbrc	r26, 7
 e28:	00 94       	com	r0
 e2a:	2a 0f       	add	r18, r26
 e2c:	30 1d       	adc	r19, r0
 e2e:	40 1d       	adc	r20, r0
 e30:	50 1d       	adc	r21, r0
 e32:	60 1d       	adc	r22, r0
 e34:	70 1d       	adc	r23, r0
 e36:	80 1d       	adc	r24, r0
 e38:	90 1d       	adc	r25, r0
 e3a:	08 95       	ret

00000e3c <__cmpdi2_s8>:
 e3c:	00 24       	eor	r0, r0
 e3e:	a7 fd       	sbrc	r26, 7
 e40:	00 94       	com	r0
 e42:	2a 17       	cp	r18, r26
 e44:	30 05       	cpc	r19, r0
 e46:	40 05       	cpc	r20, r0
 e48:	50 05       	cpc	r21, r0
 e4a:	60 05       	cpc	r22, r0
 e4c:	70 05       	cpc	r23, r0
 e4e:	80 05       	cpc	r24, r0
 e50:	90 05       	cpc	r25, r0
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
